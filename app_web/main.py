# app_web/main.py
import os
import json
import math
import asyncio
import datetime as dt
from typing import Optional
from contextlib import suppress

from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import CommandStart, Command
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest

from fastapi import FastAPI, Request
from starlette.responses import JSONResponse
from starlette import status

from shared.settings import settings
from shared.team_names import TEAMS
from shared.tz import KYIV_TZ
from shared.repo import (
    connect, get_user, upsert_user_team,
    ensure_schema_and_seed, set_user_bitrix_id
)
from shared.bx import (
    # tasks
    list_tasks, complete_task, add_comment, search_user_by_email, get_task,
    # deals
    list_deal_stages, list_deals, move_deal_to_stage, comment_deal, get_deal, get_contact
)
from worker.report_worker import daily_loop, build_full_report


# --------- Deals settings (env)
DEAL_CATEGORY_ID = int(os.getenv("DEAL_CATEGORY_ID", "0") or 0)       # –Ω–∞–ø—Ä. 20
DEAL_DONE_STAGE_ID = os.getenv("DEAL_DONE_STAGE_ID", "").strip()      # –Ω–∞–ø—Ä. C20:WON –∞–±–æ C20:UC_xxx
try:
    TEAM_STAGE_MAP = json.loads(os.getenv("TEAM_STAGE_MAP", "{}"))    # {"1":"C20:UC_..","2":"C20:UC_..",...}
except Exception:
    TEAM_STAGE_MAP = {}


# --------- Helpers for stages
def _normalize(s: str) -> str:
    return "".join(str(s).lower().replace("‚Ññ", "").split())

async def _resolve_team_stage_id(team_id: int) -> str:
    # 1) explicit map via env
    sid = str(TEAM_STAGE_MAP.get(str(team_id), TEAM_STAGE_MAP.get(team_id, ""))).strip()
    if sid:
        return sid
    # 2) try to find by stage name containing team name
    team_name = TEAMS.get(team_id, "")
    if not (DEAL_CATEGORY_ID and team_name):
        return ""
    try:
        stages = list_deal_stages(DEAL_CATEGORY_ID)  # [{STATUS_ID/ID, NAME, ...}]
    except Exception:
        return ""
    tn = _normalize(team_name)
    for st in stages:
        name = (st.get("NAME") or st.get("name") or "")
        code = (st.get("STATUS_ID") or st.get("STATUSID") or st.get("ID") or st.get("id"))
        nrm = _normalize(name)
        if tn in nrm or tn.replace("–±—Ä–∏–≥–∞–¥–∞", "brigada") in nrm:
            return str(code)
    return ""


# --------- Bot / Web (create BEFORE any @app.* decorators)
bot = Bot(settings.BOT_TOKEN)
dp = Dispatcher()
app = FastAPI()


# ========= BASIC FLOW: start & team selection =========
@dp.message(CommandStart())
async def start(m: types.Message):
    conn = await connect()
    row = await get_user(conn, m.from_user.id)
    await conn.close()

    if row and row["team_id"]:
        kb = InlineKeyboardBuilder()
        kb.button(text="üìã –ú–æ—ó –∑–∞–¥–∞—á—ñ", callback_data="tasks:list:open:1")
        kb.button(text="üîÅ –ó–º—ñ–Ω–∏—Ç–∏ –±—Ä–∏–≥–∞–¥—É", callback_data="team:change")
        kb.adjust(1, 1)
        await m.answer(
            f"–í–∏ —É –±—Ä–∏–≥–∞–¥—ñ: *{TEAMS.get(row['team_id'], '?')}*.\n–ì–æ—Ç–æ–≤—ñ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ ‚úÖ",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=kb.as_markup(),
        )
        return

    kb = InlineKeyboardBuilder()
    for tid, name in TEAMS.items():
        kb.button(text=name, callback_data=f"team:set:{tid}")
    kb.adjust(2, 3)
    await m.answer("–û–±–µ—Ä—ñ—Ç—å –≤–∞—à—É –±—Ä–∏–≥–∞–¥—É:", reply_markup=kb.as_markup())


@dp.callback_query(F.data.startswith("team:change"))
async def change_team(c: types.CallbackQuery):
    kb = InlineKeyboardBuilder()
    for tid, name in TEAMS.items():
        kb.button(text=name, callback_data=f"team:set:{tid}")
    kb.adjust(2, 3)
    with suppress(Exception):
        await c.message.edit_text("–û–±–µ—Ä—ñ—Ç—å –≤–∞—à—É –±—Ä–∏–≥–∞–¥—É:", reply_markup=kb.as_markup())
    await c.answer()


@dp.callback_query(F.data.startswith("team:set:"))
async def team_set(c: types.CallbackQuery):
    tid = int(c.data.split(":")[-1])
    full_name = f"{c.from_user.first_name or ''} {c.from_user.last_name or ''}".strip()

    conn = await connect()
    await upsert_user_team(conn, c.from_user.id, full_name, tid)
    await conn.close()

    text = f"–ë—Ä–∏–≥–∞–¥—É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: *{TEAMS.get(tid, '‚Äî')}*. –ì–æ—Ç–æ–≤–æ ‚úÖ"
    kb = InlineKeyboardBuilder()
    kb.button(text="üìã –ú–æ—ó –∑–∞–¥–∞—á—ñ", callback_data="tasks:list:open:1")
    with suppress(Exception):
        await c.message.edit_text(text, parse_mode=ParseMode.MARKDOWN, reply_markup=kb.as_markup())
    await c.answer("–ó–±–µ—Ä–µ–∂–µ–Ω–æ ‚úÖ", show_alert=False)


# ========= DIAGNOSTICS & BIND =========
@dp.message(Command("whoami"))
async def whoami(m: types.Message):
    conn = await connect()
    u = await get_user(conn, m.from_user.id)
    await conn.close()
    team = TEAMS.get(u["team_id"]) if u and u.get("team_id") else "‚Äî"
    bx = u.get("bitrix_user_id") if u else None
    await m.answer(f"TG: {m.from_user.id}\nTeam: {team}\nBitrix ID: {bx or '–Ω–µ –ø—Ä–∏–≤‚Äô—è–∑–∞–Ω–æ'}")


@dp.message(Command("bind"))
async def bind_email(m: types.Message):
    parts = (m.text or "").split()
    if len(parts) != 2 or "@" not in parts[1]:
        await m.answer("–ü—Ä–∏–∫–ª–∞–¥: `/bind user@company.com`", parse_mode=ParseMode.MARKDOWN)
        return
    email = parts[1].strip()
    try:
        res = search_user_by_email(email) or []
        user = res[0] if isinstance(res, list) and res else None
        bx_id = int(user.get("ID")) if user else None
        if not bx_id:
            await m.answer("–ù–µ –∑–Ω–∞–π—à–æ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Bitrix ü§î")
            return
        conn = await connect()
        await set_user_bitrix_id(conn, m.from_user.id, bx_id)
        await conn.close()
        await m.answer(f"–ü—Ä–∏–≤‚Äô—è–∑–∞–Ω–æ Bitrix ID: {bx_id} ‚úÖ")
    except Exception as e:
        await m.answer(f"–ù–µ –≤–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤‚Äô—è–∑–∞—Ç–∏: {e!s}")


# ========= TASKS (helpers) =========
PAGE_SIZE = 8

def _extract_deal_id_from_task(task: dict) -> Optional[int]:
    cand = task.get("UF_CRM_TASK") or task.get("ufCrmTask") or []
    if isinstance(cand, str):
        cand = [cand]
    for s in cand:
        if str(s).startswith("D_"):
            with suppress(Exception):
                return int(str(s).split("_", 1)[1])
    return None

def _format_deal_for_message(deal: dict, contact: Optional[dict]) -> str:
    # ‚ö†Ô∏è –ø—ñ–¥—Å—Ç–∞–≤ —Ä–µ–∞–ª—å–Ω—ñ UF_* –∫–ª—é—á—ñ, —è–∫—â–æ —É –≤–∞—Å —ñ–Ω—à—ñ
    type_id = deal.get("TYPE_ID") or "‚Äî"
    category = deal.get("CATEGORY_ID") or deal.get("CATEGORY") or "‚Äî"
    comment = (deal.get("COMMENTS") or "").strip() or "‚Äî"
    address = deal.get("ADDRESS") or deal.get("UF_CRM_ADDRESS") or "‚Äî"
    router = deal.get("UF_CRM_ROUTER") or "‚Äî"
    router_sum = deal.get("UF_CRM_ROUTER_PRICE") or deal.get("UF_CRM_ROUTER_SUM") or "‚Äî"

    contact_line = "‚Äî"
    if contact:
        name = " ".join(filter(None, [contact.get("NAME"), contact.get("SECOND_NAME"), contact.get("LAST_NAME")])).strip()
        phone = ""
        if isinstance(contact.get("PHONE"), list) and contact["PHONE"]:
            phone = contact["PHONE"][0].get("VALUE") or ""
        contact_line = f"{name or '–ö–æ–Ω—Ç–∞–∫—Ç'} {phone}".strip()

    return "\n".join([
        f"–¢–∏–ø —Å–¥–µ–ª–∫–∏: {type_id}",
        f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category}",
        f"–ö–æ–º–µ–Ω—Ç–∞—Ä: {comment}",
        f"–ê–¥—Ä–µ—Å–∞: {address}",
        f"–†–æ—É—Ç–µ—Ä: {router}",
        f"–í–∞—Ä—Ç—ñ—Å—Ç—å —Ä–æ—É—Ç–µ—Ä–∞: {router_sum}",
        f"–ö–æ–Ω—Ç–∞–∫—Ç: {contact_line}",
    ])

def _task_line(t: dict, mode: str) -> str:
    status_map = {1:"–ù–æ–≤–∞",2:"–í –æ—á—ñ–∫—É–≤–∞–Ω–Ω—ñ",3:"–í —Ä–æ–±–æ—Ç—ñ",4:"–í—ñ–¥–∫–ª–∞–¥–µ–Ω–∞",5:"–ó–∞–≤–µ—Ä—à–µ–Ω–∞"}
    tid = t.get("ID") or t.get("id")
    title = (t.get("TITLE") or t.get("title") or "").strip()
    deadline = t.get("DEADLINE") or t.get("deadline")
    status = t.get("STATUS") or t.get("status")

    dl_str = ""
    if deadline:
        try:
            dl = dt.datetime.fromisoformat(str(deadline).replace("Z","+00:00")).astimezone(KYIV_TZ)
            dl_str = dl.strftime("%d.%m %H:%M")
        except Exception:
            dl_str = str(deadline)

    status_txt = status_map.get(int(status)) if str(status).isdigit() else (str(status) if status else "")
    suffix = f" ‚Ä¢ –¥–æ {dl_str}" if dl_str else ""
    extra_s = f" ({status_txt})" if status_txt and mode not in ("closed_today",) else ""
    return f"‚Ä¢ #{tid}: {title}{suffix}{extra_s}"

def _mode_header(mode: str) -> str:
    return {
        "today": "–ó–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ",
        "overdue": "–ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è",
        "closed_today": "–°—å–æ–≥–æ–¥–Ω—ñ –∑–∞–∫—Ä–∏—Ç—ñ",
        "open": "–ê–∫—Ç–∏–≤–Ω—ñ –∑–∞–¥–∞—á—ñ",
    }.get(mode, "–ó–∞–≤–¥–∞–Ω–Ω—è")

def _render_tasks_page(tasks: list[dict], page: int, mode: str) -> str:
    total = len(tasks)
    pages = max(1, (total + PAGE_SIZE - 1) // PAGE_SIZE)
    page = max(1, min(page, pages))
    start = (page - 1) * PAGE_SIZE
    chunk = tasks[start:start + PAGE_SIZE]

    lines = [f"{_mode_header(mode)} (—Å—Ç–æ—Ä. {page}/{pages}, –≤—Å—å–æ–≥–æ: {total})"]
    for t in chunk:
        lines.append(_task_line(t, mode))
    return "\n".join(lines)

def _tasks_nav_kb(mode: str, page: int, total: int) -> types.InlineKeyboardMarkup:
    pages = max(1, math.ceil(max(0, total) / PAGE_SIZE))
    page = max(1, min(page, pages))
    prev_p = max(1, page - 1)
    next_p = min(pages, page + 1)

    kb = InlineKeyboardBuilder()
    # –ø–∞–≥—ñ–Ω–∞—Ü—ñ—è
    kb.button(text="‚óÄÔ∏è", callback_data=f"tasks:list:{mode}:{prev_p}")
    kb.button(text="‚ñ∂Ô∏è", callback_data=f"tasks:list:{mode}:{next_p}")
    # —Ñ—ñ–ª—å—Ç—Ä–∏
    kb.button(text="üóì –°—å–æ–≥–æ–¥–Ω—ñ", callback_data="tasks:list:today:1")
    kb.button(text="‚è∞ –ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ", callback_data="tasks:list:overdue:1")
    kb.button(text="üü¢ –í—ñ–¥–∫—Ä–∏—Ç—ñ", callback_data="tasks:list:open:1")
    kb.button(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data=f"tasks:list:{mode}:{page}")
    kb.adjust(2, 2, 2)
    return kb.as_markup()


# ========= TASKS (commands & callbacks) =========
@dp.message(Command("tasks"))
async def my_tasks(m: types.Message):
    # –ø—Ä–æ—Å—Ç–æ –≤—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ —Å–ø–∏—Å–æ–∫ –∑ –¥–µ—Ñ–æ–ª—Ç–Ω–∏–º —Ä–µ–∂–∏–º–æ–º
    kb = InlineKeyboardBuilder()
    kb.button(text="üìã –í—ñ–¥–∫—Ä–∏—Ç–∏ —Å–ø–∏—Å–æ–∫", callback_data="tasks:list:open:1")
    await m.answer("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:", reply_markup=kb.as_markup())


@dp.callback_query(F.data.startswith("tasks:list:"))
async def tasks_list_cb(c: types.CallbackQuery):
    with suppress(Exception):
        await c.answer()
    parts = c.data.split(":")  # tasks:list:<mode>:<page>
    mode = parts[2] if len(parts) > 2 else "open"
    page = int(parts[3]) if len(parts) > 3 and parts[3].isdigit() else 1
    await _show_tasks_page(c.message.chat.id, mode, page, edit_message=c.message)


@dp.callback_query(F.data.startswith("tasks:open"))
async def tasks_open_cb(c: types.CallbackQuery):
    # backward compatibility –∑ —Å—Ç–∞—Ä–æ—é –∫–Ω–æ–ø–∫–æ—é
    with suppress(Exception):
        await c.answer()
    with suppress(TelegramBadRequest):
        await c.message.edit_text("üì¶ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é ‚Ä¶")
    await _show_tasks_page(c.message.chat.id, "open", 1, edit_message=c.message)


async def _show_tasks_page(chat_id: int, mode: str, page: int, edit_message: Optional[types.Message] = None):
    # 1) get user & bx id
    conn = await connect()
    try:
        u = await get_user(conn, chat_id)   # –ø—Ä–∏–≤–∞—Ç–Ω—ñ —á–∞—Ç–∏: tg_user_id == chat_id
    finally:
        await conn.close()

    bx_id = u["bitrix_user_id"] if u else None
    if not bx_id:
        await bot.send_message(chat_id, "–°–ø–æ—á–∞—Ç–∫—É –ø—Ä–∏–≤‚Äô—è–∂—ñ—Ç—å Bitrix: /bind email")
        return

    # 2) filters by mode
    now = dt.datetime.now(KYIV_TZ)
    day_start = now.replace(hour=0, minute=0, second=0, microsecond=0)
    day_end   = now.replace(hour=23, minute=59, second=59, microsecond=0)

# —Å—Ç–∞–ª–æ ‚Äî –¥–µ—Ñ–æ–ª—Ç: —É—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ (–∂–∏–≤–∞ –∫–æ–ª–æ–Ω–∫–∞ Bitrix)
if mode in ("today","—Å—å–æ–≥–æ–¥–Ω—ñ"):
    extra = {">=DEADLINE": day_start.isoformat(), "<=DEADLINE": day_end.isoformat()}
elif mode in ("overdue","–ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ","over"):
    extra = {"<DEADLINE": now.isoformat(), "!STATUS": 5}
elif mode in ("closed_today","done_today"):
    extra = {">=CLOSED_DATE": day_start.isoformat(), "<=CLOSED_DATE": day_end.isoformat()}
else:
    extra = {"REAL_STATUS": 2}   # <-- –≥–æ–ª–æ–≤–Ω–µ: "–∞–∫—Ç–∏–≤–Ω—ñ" –∑–∞–¥–∞—á—ñ
    
    fields = ["ID","TITLE","DEADLINE","STATUS","UF_CRM_TASK"]
    # –±–µ—Ä–µ–º–æ –ª–∏—à–µ RESPONSIBLE_ID ‚Äî –º–µ–Ω—à–µ –¥—É–±–ª—ñ–≤ —ñ –º–µ–Ω—à–µ –¥–∞–Ω–∏—Ö
    filters = [{"RESPONSIBLE_ID": bx_id, **extra}]

    bag = {}
    for f in filters:
        try:
            res = list_tasks(f, fields)
            arr = res.get("result") if isinstance(res, dict) else (res or [])
            for t in arr:
                tid = str(t.get("ID") or t.get("id"))
                if tid and tid not in bag:
                    bag[tid] = t
        except Exception:
            pass

    tasks = list(bag.values())
    text = _render_tasks_page(tasks, page, mode)
    kb = _tasks_nav_kb(mode, page, len(tasks))

    if edit_message:
        with suppress(TelegramBadRequest):
            await edit_message.edit_text(text, reply_markup=kb)
    else:
        await bot.send_message(chat_id, text, reply_markup=kb)


@dp.callback_query(F.data.startswith("task:details:"))
async def task_details(c: types.CallbackQuery):
    with suppress(Exception):
        await c.answer()

    tid = int(c.data.split(":")[-1])
    try:
        task = get_task(tid) or {}
        deal_id = _extract_deal_id_from_task(task)

        deal, contact = {}, None
        if deal_id:
            deal = get_deal(deal_id) or {}
            if deal.get("CONTACT_ID"):
                with suppress(Exception):
                    contact = get_contact(int(deal["CONTACT_ID"])) or None

        title = (task.get("TITLE") or "").strip()
        head = f"# {tid} ‚Ä¢ {title}" if title else f"# {tid}"
        body = _format_deal_for_message(deal, contact) if deal else "–ü—Ä–∏–≤‚Äô—è–∑–∞–Ω—É —É–≥–æ–¥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
        text = f"{head}\n\n{body}"

        kb = InlineKeyboardBuilder()
        kb.button(text="‚úÖ –ó–∞–∫—Ä–∏—Ç–∏", callback_data=f"task:done:{tid}")
        kb.button(text="üîô –î–æ —Å–ø–∏—Å–∫—É", callback_data="tasks:list:open:1")
        kb.adjust(2)

        with suppress(TelegramBadRequest):
            await c.message.edit_text(text, reply_markup=kb.as_markup())
    except Exception:
        with suppress(Exception):
            await bot.send_message(c.message.chat.id, f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–µ—Ç–∞–ª—ñ –∑–∞–¥–∞—á—ñ #{tid} ‚ùå")


@dp.callback_query(F.data.startswith("task:done:"))
async def task_done_cb(c: types.CallbackQuery):
    with suppress(Exception):
        await c.answer()

    tid = int(c.data.split(":")[-1])
    try:
        complete_task(tid)
        with suppress(Exception):
            add_comment(tid, "–ó–∞–∫—Ä–∏—Ç–æ —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç ‚úÖ")

        with suppress(TelegramBadRequest):
            await c.message.edit_reply_markup(reply_markup=None)

        await bot.send_message(c.message.chat.id, f"–ó–∞–¥–∞—á—É #{tid} –∑–∞–≤–µ—Ä—à–µ–Ω–æ ‚úÖ")
    except Exception as e:
        with suppress(Exception):
            await bot.send_message(c.message.chat.id, f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç–∏ #{tid}: {e!s}")


# ========= QUICK TASK ACTIONS (slash) =========
@dp.message(Command("done"))
async def done(m: types.Message):
    parts = (m.text or "").split()
    if len(parts) < 2 or not parts[1].isdigit():
        await m.answer("–ü—Ä–∏–∫–ª–∞–¥: `/done 1234 –∫–æ–º–µ–Ω—Ç–∞—Ä`", parse_mode=ParseMode.MARKDOWN)
        return
    task_id = int(parts[1])
    comment = " ".join(parts[2:]) or "–ó–∞–≤–µ—Ä—à–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç"
    try:
        complete_task(task_id)
        add_comment(task_id, comment)
        await m.answer(f"–ó–∞–¥–∞—á—É #{task_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ ‚úÖ")
    except Exception as e:
        await m.answer(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç–∏ #{task_id}: {e!s}")


@dp.message(Command("chatid"))
async def chatid(m: types.Message):
    await m.answer(f"Chat ID: {m.chat.id}")


# ========= DEALS (CRM) =========
@dp.message(Command("stages"))
async def stages(m: types.Message):
    if not DEAL_CATEGORY_ID:
        await m.answer("–ó–∞–¥–∞–π—Ç–µ DEAL_CATEGORY_ID —É Secrets.")
        return
    try:
        sts = list_deal_stages(DEAL_CATEGORY_ID)
    except Exception as e:
        await m.answer(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –µ—Ç–∞–ø—ñ–≤: {e!s}")
        return
    if not sts:
        await m.answer("–ï—Ç–∞–ø–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ—Å—Ç–∞—á–∞—î –ø—Ä–∞–≤.")
        return
    lines = [f"{(s.get('STATUS_ID') or s.get('ID'))}: {s.get('NAME')}" for s in sts]
    await m.answer("–ï—Ç–∞–ø–∏ —Ü—ñ—î—ó –≤–æ—Ä–æ–Ω–∫–∏:\n" + "\n".join(lines))


@dp.message(Command("deals"))
async def deals_for_team(m: types.Message):
    if not DEAL_CATEGORY_ID:
        await m.answer("–ó–∞–¥–∞–π—Ç–µ DEAL_CATEGORY_ID —É Secrets (ID –≤–æ—Ä–æ–Ω–∫–∏, –Ω–∞–ø—Ä. 20).")
        return

    conn = await connect()
    u = await get_user(conn, m.from_user.id)
    await conn.close()
    if not u or not u.get("team_id"):
        await m.answer("–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –±—Ä–∏–≥–∞–¥—É —á–µ—Ä–µ–∑ /start.")
        return

    stage_id = await _resolve_team_stage_id(int(u["team_id"]))
    if not stage_id:
        await m.answer("–ù–µ –∑–Ω–∞–π—à–æ–≤ –µ—Ç–∞–ø –¥–ª—è —Ü—ñ—î—ó –±—Ä–∏–≥–∞–¥–∏. –í–∏–≤–µ–¥—ñ—Ç—å /stages —ñ –∑–∞–¥–∞–π—Ç–µ TEAM_STAGE_MAP –∞–±–æ –Ω–∞–∑–≤—ñ—Ç—å –µ—Ç–∞–ø —è–∫ ¬´–ë—Ä–∏–≥–∞–¥–∞ N¬ª.")
        return

    try:
        res = list_deals(
            {"CATEGORY_ID": DEAL_CATEGORY_ID, "STAGE_ID": stage_id},
            ["ID","TITLE","STAGE_ID","ASSIGNED_BY_ID","DATE_CREATE","OPPORTUNITY","CURRENCY_ID"]
        )
    except Exception as e:
        await m.answer(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É —É–≥–æ–¥: {e!s}")
        return

    items = res.get("result") if isinstance(res, dict) else (res or [])
    if not items:
        await m.answer("–£–≥–æ–¥ —É —Ü—ñ–π –∫–æ–ª–æ–Ω—Ü—ñ –ø–æ–∫–∏ –Ω–µ–º–∞—î üôÇ")
        return

    lines = []
    for d in items[:20]:
        did = d.get("ID")
        title = (d.get("TITLE") or "").strip()
        money = ""
        if d.get("OPPORTUNITY"):
            cur = d.get("CURRENCY_ID") or ""
            money = f" ‚Ä¢ {d['OPPORTUNITY']} {cur}"
        lines.append(f"‚Ä¢ #{did}: {title}{money}")
    await m.answer(
        f"–£–≥–æ–¥–∏ –¥–ª—è *{TEAMS.get(int(u['team_id']), '–±—Ä–∏–≥–∞–¥–∏')}* (–¥–æ 20):\n" + "\n".join(lines),
        parse_mode=ParseMode.MARKDOWN
    )


@dp.message(Command("won"))
async def deal_won(m: types.Message):
    parts = (m.text or "").split(maxsplit=2)
    if len(parts) < 2 or not parts[1].isdigit():
        await m.answer("–ü—Ä–∏–∫–ª–∞–¥: `/won 113776 –ö–æ–º–µ–Ω—Ç–∞—Ä`", parse_mode=ParseMode.MARKDOWN)
        return
    deal_id = int(parts[1])
    comment = parts[2] if len(parts) > 2 else "–ó–∞–∫—Ä–∏—Ç–æ —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç"

    stage_done = DEAL_DONE_STAGE_ID
    if not stage_done:
        await m.answer("–ó–∞–¥–∞–π—Ç–µ DEAL_DONE_STAGE_ID —É Secrets. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /stages, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –µ—Ç–∞–ø—ñ–≤.")
        return
    try:
        move_deal_to_stage(deal_id, stage_done)
        with suppress(Exception):
            comment_deal(deal_id, comment)
        await m.answer(f"–£–≥–æ–¥—É #{deal_id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ –µ—Ç–∞–ø `{stage_done}` ‚úÖ", parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        await m.answer(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —É–≥–æ–¥—É #{deal_id}: {e!s}")


# ========= REPORTS =========
@dp.message(Command("report_now"))
async def report_now(m: types.Message):
    text = await build_full_report()
    await bot.send_message(settings.MASTER_REPORT_CHAT_ID, text)
    await m.answer("–ó–≤—ñ—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –º–∞–π—Å—Ç–µ—Ä-–≥—Ä—É–ø—É ‚úÖ")


# ========= Webhook (route) =========
OLD_SECRET = os.getenv("WEBHOOK_SECRET_OLD", "").strip()

@app.post("/webhook/{secret}")
async def telegram_webhook(secret: str, request: Request):
    valid = {settings.WEBHOOK_SECRET.strip()}
    if OLD_SECRET:
        valid.add(OLD_SECRET)

    if secret.strip() not in valid:
        print("[webhook] WRONG SECRET got:", secret, "| expected one of:", list(valid))
        return JSONResponse({"ok": False}, status_code=status.HTTP_404_NOT_FOUND)

    update = types.Update.model_validate(await request.json(), context={"bot": bot})
    try:
        await dp.feed_update(bot, update)
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            raise
    return JSONResponse({"ok": True})


# ========= Startup =========
@app.on_event("startup")
async def on_startup():
    await ensure_schema_and_seed()

    await bot.delete_webhook(drop_pending_updates=True)
    url = f"{settings.WEBHOOK_BASE}/webhook/{settings.WEBHOOK_SECRET}"
    print("[startup] setting webhook to:", url)
    await bot.set_webhook(
        url=url,
        allowed_updates=["message", "callback_query"],
    )

    if getattr(settings, "RUN_WORKER_IN_APP", False):
        asyncio.create_task(daily_loop())
