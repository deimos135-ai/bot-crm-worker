# app_web/main.py
import asyncio
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import CommandStart, Command
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest
from fastapi import FastAPI, Request
from starlette.responses import JSONResponse

from shared.settings import settings
from shared.team_names import TEAMS
from shared.repo import connect, get_user, upsert_user_team, ensure_schema_and_seed
from shared.bx import complete_task, add_comment
from worker.report_worker import daily_loop  # –∑–∞–ø—É—Å–∫–∞—î–º–æ scheduler –≤ app-–ø—Ä–æ—Ü–µ—Å—ñ, —è–∫—â–æ —Ç—Ä–µ–±–∞

bot = Bot(settings.BOT_TOKEN)
dp = Dispatcher()
app = FastAPI()


@dp.message(CommandStart())
async def start(m: types.Message):
    # —è–∫—â–æ –∫–æ–º–∞–Ω–¥–∞ —É –≥—Ä—É–ø—ñ ‚Äî –≤—Å–µ –æ–¥–Ω–æ –¥–æ–∑–≤–æ–ª–∏–º–æ –≤–∏–±—Ä–∞—Ç–∏ –±—Ä–∏–≥–∞–¥—É
    conn = await connect()
    row = await get_user(conn, m.from_user.id)
    await conn.close()

    # —è–∫—â–æ –≤–∂–µ –≤–∏–±—Ä–∞–Ω–∞ –±—Ä–∏–≥–∞–¥–∞ ‚Äî –∑–∞–ø—Ä–æ–ø–æ–Ω—É—î–º–æ –∑–º—ñ–Ω–∏—Ç–∏
    if row and row["team_id"]:
        kb = InlineKeyboardBuilder()
        kb.button(text="üîÅ –ó–º—ñ–Ω–∏—Ç–∏ –±—Ä–∏–≥–∞–¥—É", callback_data="team:change")
        await m.answer(
            f"–í–∏ —É –±—Ä–∏–≥–∞–¥—ñ: *{TEAMS.get(row['team_id'], '?')}*.\n–ì–æ—Ç–æ–≤—ñ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ ‚úÖ",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=kb.as_markup(),
        )
        return

    # –ø–µ—Ä–≤–∏–Ω–Ω–∏–π –≤–∏–±—ñ—Ä –±—Ä–∏–≥–∞–¥–∏
    kb = InlineKeyboardBuilder()
    for tid, name in TEAMS.items():
        kb.button(text=name, callback_data=f"team:set:{tid}")
    kb.adjust(2, 3)
    await m.answer("–û–±–µ—Ä—ñ—Ç—å –≤–∞—à—É –±—Ä–∏–≥–∞–¥—É:", reply_markup=kb.as_markup())


@dp.callback_query(F.data.startswith("team:change"))
async def change_team(c: types.CallbackQuery):
    kb = InlineKeyboardBuilder()
    for tid, name in TEAMS.items():
        kb.button(text=name, callback_data=f"team:set:{tid}")
    kb.adjust(2, 3)
    try:
        await c.message.edit_text("–û–±–µ—Ä—ñ—Ç—å –≤–∞—à—É –±—Ä–∏–≥–∞–¥—É:", reply_markup=kb.as_markup())
    except TelegramBadRequest as e:
        # –Ø–∫—â–æ —Ç–µ–∫—Å—Ç/markup —ñ–¥–µ–Ω—Ç–∏—á–Ω—ñ ‚Äî —ñ–≥–Ω–æ—Ä—É—î–º–æ, –∞–±–∏ –Ω–µ –ø–∞–¥–∞—Ç–∏ 400
        if "message is not modified" not in str(e):
            raise
    finally:
        # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ "–∫—Ä—É—Ç–∏–ª–∫—É" –Ω–∞ –∫–Ω–æ–ø—Ü—ñ
        await c.answer()


@dp.callback_query(F.data.startswith("team:set:"))
async def team_set(c: types.CallbackQuery):
    tid = int(c.data.split(":")[-1])
    full_name = f"{c.from_user.first_name or ''} {c.from_user.last_name or ''}".strip()

    conn = await connect()
    await upsert_user_team(conn, c.from_user.id, full_name, tid)
    await conn.close()

    target_text = f"–ë—Ä–∏–≥–∞–¥—É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: *{TEAMS.get(tid, '‚Äî')}*. –ì–æ—Ç–æ–≤–æ ‚úÖ"
    try:
        # –Ø–≤–Ω–æ –ø—Ä–∏–±–∏—Ä–∞—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É, —â–æ–± Telegram —Ç–æ—á–Ω–æ –≤–≤–∞–∂–∞–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–º—ñ–Ω–µ–Ω–∏–º
        await c.message.edit_text(
            target_text, parse_mode=ParseMode.MARKDOWN, reply_markup=None
        )
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            raise
    finally:
        await c.answer("–ó–±–µ—Ä–µ–∂–µ–Ω–æ ‚úÖ", show_alert=False)


@dp.message(Command("done"))
async def done(m: types.Message):
    parts = (m.text or "").split()
    if len(parts) < 2 or not parts[1].isdigit():
        await m.answer("–ü—Ä–∏–∫–ª–∞–¥: `/done 1234 –∫–æ–º–µ–Ω—Ç–∞—Ä`", parse_mode=ParseMode.MARKDOWN)
        return

    task_id = int(parts[1])
    comment = " ".join(parts[2:]) or "–ó–∞–≤–µ—Ä—à–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç"
    try:
        complete_task(task_id)
        add_comment(task_id, comment)
        await m.answer(f"–ó–∞–¥–∞—á—É #{task_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ ‚úÖ")
    except Exception as e:
        await m.answer(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç–∏ #{task_id}: {e!s}")


@dp.message(Command("chatid"))
async def chatid(m: types.Message):
    await m.answer(f"Chat ID: {m.chat.id}")


# ---- FastAPI webhook
@app.post(f"/webhook/{settings.WEBHOOK_SECRET}")
async def telegram_webhook(request: Request):
    # –ü–∞—Ä—Å–∏–º–æ –∞–ø–¥–µ–π—Ç —ñ –ø–µ—Ä–µ–¥–∞—î–º–æ –≤ aiogram
    update = types.Update.model_validate(await request.json(), context={"bot": bot})
    try:
        await dp.feed_update(bot, update)
    except TelegramBadRequest as e:
        # –°—Ç—Ä–∞—Ö—É—î–º–æ —â–µ —Ä–∞–∑ –Ω–∞ —Ä—ñ–≤–Ω—ñ –≤–µ–±—Ö—É–∫–∞
        if "message is not modified" not in str(e):
            raise
    return JSONResponse({"ok": True})


@app.on_event("startup")
async def on_startup():
    # 1) –ë–î —Ç–∞ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ
    await ensure_schema_and_seed()

    # 2) –†–µ—î—Å—Ç—Ä—É—î–º–æ Telegram webhook
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_webhook(
        url=f"{settings.WEBHOOK_BASE}/webhook/{settings.WEBHOOK_SECRET}",
        allowed_updates=["message", "callback_query"],
    )

    # 3) –ó–∞–ø—É—Å–∫–∞—î–º–æ –¥–æ–±–æ–≤–∏–π –∑–≤—ñ—Ç —É —Ü—å–æ–º—É –∂ –ø—Ä–æ—Ü–µ—Å—ñ (—è–∫—â–æ –≤–≤—ñ–º–∫–Ω–µ–Ω–æ —á–µ—Ä–µ–∑ —Å–µ–∫—Ä–µ—Ç)
    #    –ü—Ä–∞—Ü—é—î, –∫–æ–ª–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ RUN_WORKER_IN_APP=1
    try:
        if getattr(settings, "RUN_WORKER_IN_APP", False):
            asyncio.create_task(daily_loop())
    except Exception:
        # —è–∫—â–æ –ø–æ–ª—è –Ω–µ–º–∞—î/—Å–µ–∫—Ä–µ—Ç –Ω–µ –∑–∞–¥–∞–Ω–∏–π ‚Äî —Ç–∏—Ö–æ —ñ–≥–Ω–æ—Ä—É—î–º–æ
        pass
