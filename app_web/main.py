# app_web/main.py
import html
import json
import logging
import re
from datetime import datetime, timedelta
from typing import Any, Dict, List, Optional, Tuple

import aiohttp
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
    BotCommand,
    Message,
    Update,
    CallbackQuery,
)

from shared.settings import settings

logging.basicConfig(level=logging.INFO)
log = logging.getLogger("app")

app = FastAPI()
bot = Bot(token=settings.BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# ----------------------------- Bitrix helpers -----------------------------

B24_BASE = settings.BITRIX_WEBHOOK_BASE.rstrip("/")
HTTP: aiohttp.ClientSession


async def b24(method: str, **params) -> Any:
    url = f"{B24_BASE}/{method}.json"
    async with HTTP.post(url, json=params) as resp:
        data = await resp.json()
        if "error" in data:
            raise RuntimeError(f"B24 error: {data['error']}: {data.get('error_description')}")
        return data.get("result")


async def b24_list(method: str, **params) -> List[Dict[str, Any]]:
    """–ü–æ—Å—Ç–æ—Ä—ñ–Ω–∫–æ–≤–∞ –≤–∏–±—ñ—Ä–∫–∞ Bitrix (–¥–æ ~1000 –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–ª—è –∑–≤—ñ—Ç—É)."""
    start = 0
    items: List[Dict[str, Any]] = []
    while True:
        chunk = await b24(method, start=start, **params)
        if isinstance(chunk, dict) and "items" in chunk:
            page_items = chunk["items"]
            next_start = chunk.get("next")  # —ñ–Ω–æ–¥—ñ Bitrix —Ç–∞–∫ –ø–æ–≤–µ—Ä—Ç–∞—î
        else:
            page_items = chunk or []
            next_start = None
        items.extend(page_items)
        if not page_items:
            break
        if next_start is None:
            start += len(page_items)
        else:
            start = next_start
        if start >= 1000:
            break
    return items


# ----------------------------- Caches -------------------------------------

_DEAL_TYPE_MAP: Optional[Dict[str, str]] = None
_ROUTER_ENUM_MAP: Optional[Dict[str, str]] = None      # UF_CRM_1602756048
_TARIFF_ENUM_MAP: Optional[Dict[str, str]] = None      # UF_CRM_1610558031277
_FACT_ENUM_LIST: Optional[List[Tuple[str, str]]] = None  # list of (value_id, name)


async def get_deal_type_map() -> Dict[str, str]:
    global _DEAL_TYPE_MAP
    if _DEAL_TYPE_MAP is None:
        items = await b24("crm.status.list", filter={"ENTITY_ID": "DEAL_TYPE"})
        _DEAL_TYPE_MAP = {i["STATUS_ID"]: i["NAME"] for i in items}
    return _DEAL_TYPE_MAP


async def _enum_map_for_userfield(field_name: str) -> Dict[str, str]:
    fields = await b24("crm.deal.userfield.list", order={"SORT": "ASC"})
    uf = next((f for f in fields if f.get("FIELD_NAME") == field_name), None)
    options: Dict[str, str] = {}
    if uf and isinstance(uf.get("LIST"), list):
        for o in uf["LIST"]:
            options[str(o["ID"])] = o["VALUE"]
    return options


async def get_router_enum_map() -> Dict[str, str]:
    global _ROUTER_ENUM_MAP
    if _ROUTER_ENUM_MAP is None:
        _ROUTER_ENUM_MAP = await _enum_map_for_userfield("UF_CRM_1602756048")
    return _ROUTER_ENUM_MAP


async def get_tariff_enum_map() -> Dict[str, str]:
    global _TARIFF_ENUM_MAP
    if _TARIFF_ENUM_MAP is None:
        _TARIFF_ENUM_MAP = await _enum_map_for_userfield("UF_CRM_1610558031277")
    return _TARIFF_ENUM_MAP


async def get_fact_enum_list() -> List[Tuple[str, str]]:
    """
    –î–ª—è UF_CRM_1602766787968: –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ (VALUE, NAME) –≤–∏–∫–ª—é—á–∞—é—á–∏ '–Ω–µ –≤—ã–±—Ä–∞–Ω–æ'.
    –ü–æ—Ä—è–¥–æ–∫ —è–∫ —É Bitrix (SORT asc).
    """
    global _FACT_ENUM_LIST
    if _FACT_ENUM_LIST is None:
        fields = await b24("crm.deal.userfield.list", order={"SORT": "ASC"})
        uf = next((f for f in fields if f.get("FIELD_NAME") == "UF_CRM_1602766787968"), None)
        lst: List[Tuple[str, str]] = []
        if uf and isinstance(uf.get("LIST"), list):
            for o in uf["LIST"]:
                val = str(o.get("VALUE", ""))
                name = str(o.get("NAME", ""))
                if val == "":
                    continue
                lst.append((val, name))
        _FACT_ENUM_LIST = lst
    return _FACT_ENUM_LIST


# ----------------------------- UI helpers ---------------------------------

def main_menu_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì¶ –ú–æ—ó —É–≥–æ–¥–∏")],
            [KeyboardButton(text="üìã –ú–æ—ó –∑–∞–¥–∞—á—ñ")],
            [KeyboardButton(text="üìä –ó–≤—ñ—Ç –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ")],
            [KeyboardButton(text="üìâ –ó–≤—ñ—Ç –∑–∞ –≤—á–æ—Ä–∞")],
        ],
        resize_keyboard=True,
        one_time_keyboard=False,
        selective=False,
    )


def pick_brigade_inline_kb() -> InlineKeyboardMarkup:
    rows = [
        [InlineKeyboardButton(text=f"–ë—Ä–∏–≥–∞–¥–∞ ‚Ññ{i}", callback_data=f"setbrig:{i}")]
        for i in (1, 2, 3, 4, 5)
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)


# ----------------------------- Deal rendering ------------------------------

def _strip_bb(text: str) -> str:
    if not text:
        return ""
    t = re.sub(r"\[/?p\]", "", text, flags=re.I)
    return t.strip()


def _money_pair(val: Optional[str]) -> Optional[str]:
    if not val:
        return None
    parts = str(val).split("|", 1)
    if len(parts) == 2:
        return f"{parts[0]} {parts[1]}"
    return val


async def render_deal_card(deal: Dict[str, Any]) -> str:
    deal_type_map = await get_deal_type_map()
    router_map = await get_router_enum_map()
    tariff_map = await get_tariff_enum_map()

    deal_id = deal.get("ID")
    title = deal.get("TITLE") or f"Deal #{deal_id}"
    type_code = deal.get("TYPE_ID") or ""
    type_name = deal_type_map.get(type_code, type_code or "‚Äî")
    category = deal.get("CATEGORY_ID", "‚Äî")

    address_value = deal.get("UF_CRM_6009542BC647F") or deal.get("ADDRESS") or "‚Äî"

    router_id = str(deal.get("UF_CRM_1602756048") or "")
    router_name = router_map.get(router_id) if router_id else "‚Äî"
    router_price = _money_pair(deal.get("UF_CRM_1604468981320")) or "‚Äî"

    tariff_id = str(deal.get("UF_CRM_1610558031277") or "")
    tariff_name = tariff_map.get(tariff_id) if tariff_id else "‚Äî"
    tariff_price = _money_pair(deal.get("UF_CRM_1611652685839")) or "‚Äî"

    install_price = _money_pair(deal.get("UF_CRM_1609868447208")) or "‚Äî"

    comments = _strip_bb(deal.get("COMMENTS") or "")

    contact_name = "‚Äî"
    contact_phone = ""
    if deal.get("CONTACT_ID"):
        try:
            c = await b24("crm.contact.get", id=deal["CONTACT_ID"])
            if c:
                contact_name = f"{c.get('NAME', '')} {c.get('SECOND_NAME', '')} {c.get('LAST_NAME', '')}".strip() or "‚Äî"
                phones = c.get("PHONE") or []
                if isinstance(phones, list) and phones:
                    contact_phone = phones[0].get("VALUE") or ""
        except Exception as e:
            log.warning("contact.get failed: %s", e)

    head = f"#{deal_id} ‚Ä¢ {html.escape(title)}"
    link = f"https://{settings.B24_DOMAIN}/crm/deal/details/{deal_id}/"

    contact_line = f"<b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {html.escape(contact_name)}"
    if contact_phone:
        contact_line += f" ‚Ä¢ {html.escape(contact_phone)}"

    body_lines = [
        f"<b>–¢–∏–ø —É–≥–æ–¥–∏:</b> {html.escape(type_name)}",
        f"<b>–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:</b> {html.escape(str(category))}",
        f"<b>–ê–¥—Ä–µ—Å–∞:</b> {html.escape(address_value)}",
        "",
        f"<b>–†–æ—É—Ç–µ—Ä:</b> {html.escape(router_name)}",
        f"<b>–í–∞—Ä—Ç—ñ—Å—Ç—å —Ä–æ—É—Ç–µ—Ä–∞:</b> {html.escape(router_price)}",
        "",
        f"<b>–¢–∞—Ä–∏—Ñ:</b> {html.escape(tariff_name)}",
        f"<b>–í–∞—Ä—Ç—ñ—Å—Ç—å —Ç–∞—Ä–∏—Ñ—É:</b> {html.escape(tariff_price)}",
        f"<b>–í–∞—Ä—Ç—ñ—Å—Ç—å –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:</b> {html.escape(install_price)}",
        "",
        f"<b>–ö–æ–º–µ–Ω—Ç–∞—Ä:</b> {html.escape(comments) if comments else '‚Äî'}",
        "",
        contact_line,
        "",
        f"<a href=\"{link}\">–í—ñ–¥–∫—Ä–∏—Ç–∏ –≤ Bitrix24</a>",
    ]
    return f"<b>{head}</b>\n\n" + "\n".join(body_lines)


def deal_keyboard(deal: Dict[str, Any]) -> InlineKeyboardMarkup:
    deal_id = str(deal.get("ID"))
    kb = [[InlineKeyboardButton(text="‚úÖ –ó–∞–∫—Ä–∏—Ç–∏ —É–≥–æ–¥—É", callback_data=f"close:{deal_id}")]]
    return InlineKeyboardMarkup(inline_keyboard=kb)


async def send_deal_card(chat_id: int, deal: Dict[str, Any]) -> None:
    text = await render_deal_card(deal)
    await bot.send_message(chat_id, text, reply_markup=deal_keyboard(deal), disable_web_page_preview=True)


# ----------------------------- Simple storage (brigade only) ---------------

_USER_BRIGADE: Dict[int, int] = {}


def get_user_brigade(user_id: int) -> Optional[int]:
    return _USER_BRIGADE.get(user_id)


def set_user_brigade(user_id: int, brigade: int) -> None:
    _USER_BRIGADE[user_id] = brigade


# mapping "brigade number" -> UF_CRM_1611995532420[] option IDs (brigade items)
_BRIGADE_EXEC_OPTION_ID = {
    1: 5494,
    2: 5496,
    3: 5498,
    4: 5500,
    5: 5502,
}

# mapping "brigade number" -> stage code in –ö–∞–Ω–±–∞–Ω—ñ
_STAGE_BY_BRIGADE = {
    1: "UC_XF8O6V",
    2: "UC_0XLPCN",
    3: "UC_204CP3",
    4: "UC_TNEW3Z",
    5: "UC_RMBZ37",
}

# ----------------------------- Close wizard (fact + reason) ----------------

# user_id -> context
_PENDING_CLOSE: Dict[int, Dict[str, Any]] = {}

_FACTS_PER_PAGE = 8  # —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –º–µ–Ω—é


def _facts_page_kb(deal_id: str, page: int, facts: List[Tuple[str, str]]) -> InlineKeyboardMarkup:
    """
    –ú–µ–Ω—é —Ñ–∞–∫—Ç—ñ–≤ —É –°–¢–û–í–ü–ß–ò–ö (–ø–æ 1 –≤ —Ä—è–¥–∫—É) + –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è.
    facts: list of (value_id, name)
    """
    start = page * _FACTS_PER_PAGE
    chunk = facts[start:start + _FACTS_PER_PAGE]

    rows: List[List[InlineKeyboardButton]] = []
    for val, name in chunk:
        rows.append([InlineKeyboardButton(text=name[:40], callback_data=f"factsel:{deal_id}:{val}")])

    total_pages = max(1, (len(facts) + _FACTS_PER_PAGE - 1) // _FACTS_PER_PAGE)
    nav: List[InlineKeyboardButton] = []
    if page > 0:
        nav.append(InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data=f"factpage:{deal_id}:{page-1}"))
    nav.append(InlineKeyboardButton(text=f"–°—Ç–æ—Ä. {page+1}/{total_pages}", callback_data="noop"))
    if (page + 1) * _FACTS_PER_PAGE < len(facts):
        nav.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ¬ª", callback_data=f"factpage:{deal_id}:{page+1}"))
    rows.append(nav)

    rows.append([InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f"cmtcancel:{deal_id}")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


async def _finalize_close(user_id: int, deal_id: str, fact_val: str, fact_name: str, reason_text: str) -> None:
    # get deal and category
    deal = await b24("crm.deal.get", id=deal_id)
    if not deal:
        raise RuntimeError("Deal not found")
    category = str(deal.get("CATEGORY_ID") or "0")
    target_stage = f"C{category}:WON"

    # build COMMENTS append
    prev_comments = _strip_bb(deal.get("COMMENTS") or "")
    block = f"[p]<b>–ó–∞–∫—Ä–∏—Ç—Ç—è:</b> {html.escape(fact_name)}[/p]"
    if reason_text:
        block += f"\n[p]<b>–ü—Ä–∏—á–∏–Ω–∞ —Ä–µ–º–æ–Ω—Ç—É:</b> {html.escape(reason_text)}[/p]"
    new_comments = block if not prev_comments else f"{prev_comments}\n\n{block}"

    # executors: set brigade option by user brigade
    brigade = get_user_brigade(user_id)
    exec_list = []
    if brigade and brigade in _BRIGADE_EXEC_OPTION_ID:
        exec_list = [_BRIGADE_EXEC_OPTION_ID[brigade]]

    # update fields
    fields = {
        "STAGE_ID": target_stage,
        "COMMENTS": new_comments,
        "UF_CRM_1602766787968": fact_val,            # –©–æ –ø–æ —Ñ–∞–∫—Ç—É –∑—Ä–æ–±–ª–µ–Ω–æ (enum value id)
        "UF_CRM_1702456465911": reason_text,         # –ü—Ä–∏—á–∏–Ω–∞ —Ä–µ–º–æ–Ω—Ç—É (free text)
    }
    if exec_list:
        fields["UF_CRM_1611995532420"] = exec_list   # –í–∏–∫–æ–Ω–∞–≤–µ—Ü—å (multi)

    await b24("crm.deal.update", id=deal_id, fields=fields)


# ----------------------------- Handlers ------------------------------------

@dp.message(Command("start"))
async def cmd_start(m: Message):
    b = get_user_brigade(m.from_user.id)
    text = "–ì–æ—Ç–æ–≤—ñ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ ‚úÖ"
    if b:
        text += f"\n–ü–æ—Ç–æ—á–Ω–∞ –±—Ä–∏–≥–∞–¥–∞: ‚Ññ{b}"
    else:
        text += "\n–û–±–µ—Ä—ñ—Ç—å –≤–∞—à—É –±—Ä–∏–≥–∞–¥—É –Ω–∏–∂—á–µ ‚¨áÔ∏è"

    await m.answer(text, reply_markup=main_menu_kb())
    if not b:
        await m.answer("–®–≤–∏–¥–∫–∏–π –≤–∏–±—ñ—Ä –±—Ä–∏–≥–∞–¥–∏:", reply_markup=pick_brigade_inline_kb())


@dp.message(Command("menu"))
async def cmd_menu(m: Message):
    await m.answer("–ú–µ–Ω—é –≤—ñ–¥–∫—Ä–∏—Ç–æ üëá", reply_markup=main_menu_kb())


@dp.message(Command("set_brigade"))
async def cmd_set_brigade(m: Message):
    parts = (m.text or "").split(maxsplit=1)
    if len(parts) < 2:
        await m.answer("–í–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä –±—Ä–∏–≥–∞–¥–∏: /set_brigade 1", reply_markup=main_menu_kb())
        await m.answer("–ê–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É:", reply_markup=pick_brigade_inline_kb())
        return
    try:
        brigade = int(parts[1])
    except ValueError:
        await m.answer("–ù–æ–º–µ—Ä –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º: 1..5", reply_markup=main_menu_kb())
        return

    if brigade not in (1, 2, 3, 4, 5):
        await m.answer("–î–æ—Å—Ç—É–ø–Ω—ñ –±—Ä–∏–≥–∞–¥–∏: 1..5", reply_markup=main_menu_kb())
        return

    set_user_brigade(m.from_user.id, brigade)
    await m.answer(f"‚úÖ –ü—Ä–∏–≤‚Äô—è–∑–∞–Ω–æ –¥–æ –±—Ä–∏–≥–∞–¥–∏ ‚Ññ{brigade}", reply_markup=main_menu_kb())


@dp.callback_query(F.data.startswith("setbrig:"))
async def cb_setbrig(c: CallbackQuery):
    await c.answer()
    try:
        brigade = int(c.data.split(":", 1)[1])
    except Exception:
        await c.message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä –±—Ä–∏–≥–∞–¥–∏.", reply_markup=main_menu_kb())
        return
    if brigade not in (1, 2, 3, 4, 5):
        await c.message.answer("–î–æ—Å—Ç—É–ø–Ω—ñ –±—Ä–∏–≥–∞–¥–∏: 1..5", reply_markup=main_menu_kb())
        return
    set_user_brigade(c.from_user.id, brigade)
    await c.message.answer(f"‚úÖ –û–±—Ä–∞–Ω–æ –±—Ä–∏–≥–∞–¥—É ‚Ññ{brigade}", reply_markup=main_menu_kb())


@dp.message(F.text == "üì¶ –ú–æ—ó —É–≥–æ–¥–∏")
async def msg_my_deals(m: Message):
    brigade = get_user_brigade(m.from_user.id)
    if not brigade:
        await m.answer("–°–ø–µ—Ä—à—É –æ–±–µ—Ä—ñ—Ç—å –±—Ä–∏–≥–∞–¥—É:", reply_markup=pick_brigade_inline_kb())
        return
    stage_code = _STAGE_BY_BRIGADE.get(brigade)
    if not stage_code:
        await m.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä –±—Ä–∏–≥–∞–¥–∏.", reply_markup=main_menu_kb())
        return

    await m.answer(f"üì¶ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é —É–≥–æ–¥–∏ –¥–ª—è –±—Ä–∏–≥–∞–¥–∏ ‚Ññ{brigade}‚Ä¶", reply_markup=main_menu_kb())

    deals: List[Dict[str, Any]] = await b24(
        "crm.deal.list",
        filter={"CLOSED": "N", "STAGE_ID": f"C20:{stage_code}"},
        order={"DATE_CREATE": "DESC"},
        select=[
            "ID", "TITLE", "TYPE_ID", "CATEGORY_ID", "STAGE_ID",
            "COMMENTS", "CONTACT_ID",
            "UF_CRM_6009542BC647F", "ADDRESS",
            "UF_CRM_1602756048", "UF_CRM_1604468981320",
            "UF_CRM_1610558031277", "UF_CRM_1611652685839",
            "UF_CRM_1609868447208",
        ],
    )
    if not deals:
        await m.answer("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —É–≥–æ–¥.", reply_markup=main_menu_kb())
        return
    for d in deals[:25]:
        await send_deal_card(m.chat.id, d)


@dp.callback_query(F.data == "my_deals")
async def cb_my_deals(c: CallbackQuery):
    await c.answer()
    await msg_my_deals(c.message)


@dp.message(F.text == "üìã –ú–æ—ó –∑–∞–¥–∞—á—ñ")
async def msg_tasks(m: Message):
    await m.answer("–ó–∞–¥–∞—á—ñ —â–µ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ üõ†Ô∏è", reply_markup=main_menu_kb())


@dp.message(Command("deal_dump"))
async def deal_dump(m: Message):
    mtext = (m.text or "").strip()
    m2 = re.search(r"(\d+)", mtext)
    if not m2:
        await m.answer("–í–∫–∞–∂—ñ—Ç—å ID —É–≥–æ–¥–∏: /deal_dump 12345", reply_markup=main_menu_kb())
        return
    deal_id = m2.group(1)
    deal = await b24("crm.deal.get", id=deal_id)
    if not deal:
        await m.answer("–ù–µ –∑–Ω–∞–π—à–æ–≤ —É–≥–æ–¥—É.", reply_markup=main_menu_kb())
        return
    pretty = html.escape(json.dumps(deal, ensure_ascii=False, indent=2))
    await m.answer(f"<b>Dump —É–≥–æ–¥–∏ #{deal_id}</b>\n<pre>{pretty}</pre>", reply_markup=main_menu_kb())
    await send_deal_card(m.chat.id, deal)


# ======== –ú–ê–ô–°–¢–ï–† –ó–ê–ö–†–ò–¢–¢–Ø: –≤–∏–±—ñ—Ä —Ñ–∞–∫—Ç—É + –ø—Ä–∏—á–∏–Ω–∞ ==========

@dp.callback_query(F.data.startswith("close:"))
async def cb_close_deal_start(c: CallbackQuery):
    await c.answer()
    deal_id = c.data.split(":", 1)[1]
    facts = await get_fact_enum_list()
    _PENDING_CLOSE[c.from_user.id] = {"deal_id": deal_id, "stage": "pick_fact", "page": 0}
    await c.message.answer(
        f"–ó–∞–∫—Ä–∏–≤–∞—î–º–æ —É–≥–æ–¥—É <a href=\"https://{settings.B24_DOMAIN}/crm/deal/details/{deal_id}/\">#{deal_id}</a>. –û–±–µ—Ä—ñ—Ç—å, —â–æ –∑—Ä–æ–±–ª–µ–Ω–æ:",
        reply_markup=_facts_page_kb(deal_id, 0, facts),
    )


@dp.callback_query(F.data.startswith("factpage:"))
async def cb_fact_page(c: CallbackQuery):
    await c.answer()
    parts = c.data.split(":")
    if len(parts) < 3:
        return
    deal_id, page_s = parts[1], parts[2]
    try:
        page = int(page_s)
    except:
        page = 0
    facts = await get_fact_enum_list()
    await c.message.edit_reply_markup(reply_markup=_facts_page_kb(deal_id, page, facts))
    ctx = _PENDING_CLOSE.get(c.from_user.id)
    if ctx:
        ctx["page"] = page


@dp.callback_query(F.data.startswith("factsel:"))
async def cb_fact_select(c: CallbackQuery):
    await c.answer()
    parts = c.data.split(":")
    if len(parts) < 3:
        return
    deal_id, fact_val = parts[1], parts[2]
    facts = await get_fact_enum_list()
    fact_name = next((n for v, n in facts if v == fact_val), "")
    if not fact_name:
        await c.message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è.")
        return
    _PENDING_CLOSE[c.from_user.id] = {
        "deal_id": deal_id,
        "stage": "await_reason",
        "fact_val": fact_val,
        "fact_name": fact_name,
    }
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data=f"reason_skip:{deal_id}")],
        [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f"cmtcancel:{deal_id}")],
    ])
    await c.message.answer(
        f"–û–±—Ä–∞–Ω–æ: <b>{html.escape(fact_name)}</b>\n–í–≤–µ–¥—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É —Ä–µ–º–æ–Ω—Ç—É –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º, –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏¬ª.",
        reply_markup=kb,
    )


@dp.callback_query(F.data.startswith("reason_skip:"))
async def cb_reason_skip(c: CallbackQuery):
    await c.answer()
    ctx = _PENDING_CLOSE.get(c.from_user.id)
    if not ctx or ctx.get("stage") != "await_reason":
        await c.message.answer("–ù–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è.")
        return
    deal_id = ctx["deal_id"]
    fact_val = ctx["fact_val"]
    fact_name = ctx["fact_name"]
    try:
        await _finalize_close(c.from_user.id, deal_id, fact_val, fact_name, reason_text="")
        await c.message.answer(f"‚úÖ –£–≥–æ–¥—É #{deal_id} –∑–∞–∫—Ä–∏—Ç–æ. –î–∞–Ω—ñ –∑–∞–ø–∏—Å–∞–Ω—ñ.")
        deal2 = await b24("crm.deal.get", id=deal_id)
        await send_deal_card(c.message.chat.id, deal2)
    except Exception as e:
        log.exception("finalize close (skip reason) failed")
        await c.message.answer(f"‚ùóÔ∏è–ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è: {e}")
    finally:
        _PENDING_CLOSE.pop(c.from_user.id, None)


@dp.callback_query(F.data.startswith("cmtcancel:"))
async def cb_close_cancel(c: CallbackQuery):
    await c.answer("–°–∫–∞—Å–æ–≤–∞–Ω–æ")
    _PENDING_CLOSE.pop(c.from_user.id, None)
    await c.message.answer("–°–∫–∞—Å–æ–≤–∞–Ω–æ. –£–≥–æ–¥—É –Ω–µ –∑–º—ñ–Ω–µ–Ω–æ.", reply_markup=main_menu_kb())


# –¢–µ–∫—Å—Ç –ø—Ä–∏—á–∏–Ω–∏ —Ä–µ–º–æ–Ω—Ç—É ‚Äî —Ä–µ–∞–≥—É—î–º–æ –õ–ò–®–ï –∫–æ–ª–∏ —á–µ–∫–∞—î–º–æ –ø—Ä–∏—á–∏–Ω—É
@dp.message()
async def catch_free_text(m: Message):
    ctx = _PENDING_CLOSE.get(m.from_user.id)
    if not ctx or ctx.get("stage") != "await_reason":
        return
    deal_id = ctx["deal_id"]
    fact_val = ctx["fact_val"]
    fact_name = ctx["fact_name"]
    reason = (m.text or "").strip()
    try:
        await _finalize_close(m.from_user.id, deal_id, fact_val, fact_name, reason_text=reason)
        await m.answer(f"‚úÖ –£–≥–æ–¥—É #{deal_id} –∑–∞–∫—Ä–∏—Ç–æ. –î–∞–Ω—ñ –∑–∞–ø–∏—Å–∞–Ω—ñ.")
        deal2 = await b24("crm.deal.get", id=deal_id)
        await send_deal_card(m.chat.id, deal2)
    except Exception as e:
        log.exception("finalize close (reason text) failed")
        await m.answer(f"‚ùóÔ∏è–ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è: {e}")
    finally:
        _PENDING_CLOSE.pop(m.from_user.id, None)


# ----------------------------- Reports -------------------------------------

def _day_range_utc(day: datetime) -> Tuple[str, str]:
    """
    –§–æ—Ä–º—É—î–º–æ [>=CLOSEDATE, <CLOSEDATE_NEXT] —É —Ñ–æ—Ä–º–∞—Ç—ñ 'YYYY-MM-DD HH:MM:SS'.
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π –¥–µ–Ω—å –±–µ–∑ TZ ‚Äî Bitrix —Ü–µ –ø—Ä–∏–π–º–∞—î –∫–æ—Ä–µ–∫—Ç–Ω–æ.
    """
    d0 = day.replace(hour=0, minute=0, second=0, microsecond=0)
    d1 = d0 + timedelta(days=1)
    fmt = "%Y-%m-%d %H:%M:%S"
    return d0.strftime(fmt), d1.strftime(fmt)


async def _report_for_day(user_id: int, day: datetime) -> str:
    brigade = get_user_brigade(user_id)
    if not brigade:
        return "–°–ø–µ—Ä—à—É –æ–±–µ—Ä—ñ—Ç—å –±—Ä–∏–≥–∞–¥—É:",

    exec_opt = _BRIGADE_EXEC_OPTION_ID.get(brigade)
    if not exec_opt:
        return "–ù–µ–≤—ñ–¥–æ–º–∏–π –Ω–æ–º–µ—Ä –±—Ä–∏–≥–∞–¥–∏."

    start_s, end_s = _day_range_utc(day)

    # –∑–∞–∫—Ä–∏—Ç—ñ –∑–∞ –¥–µ–Ω—å (WON) —Üi—î—é –±—Ä–∏–≥–∞–¥–æ—é
    deals = await b24_list(
        "crm.deal.list",
        filter={
            "CATEGORY_ID": 20,
            "STAGE_ID": "C20:WON",
            "UF_CRM_1611995532420": exec_opt,  # –í–∏–∫–æ–Ω–∞–≤–µ—Ü—å = –ë—Ä–∏–≥–∞–¥–∞ N
            ">=CLOSEDATE": start_s,
            "<CLOSEDATE": end_s,
        },
        select=["ID", "TITLE", "TYPE_ID", "CLOSEDATE"],
        order={"ID": "DESC"},
    )

    type_map = await get_deal_type_map()
    total = len(deals)
    by_type: Dict[str, int] = {}
    for d in deals:
        t = type_map.get(d.get("TYPE_ID") or "", "–Ü–Ω—à–µ")
        by_type[t] = by_type.get(t, 0) + 1

    # —Å–∫—ñ–ª—å–∫–∏ –∞–∫—Ç–∏–≤–Ω–∏—Ö —É –∫–æ–ª–æ–Ω—Ü—ñ –±—Ä–∏–≥–∞–¥–∏ –∑–∞—Ä–∞–∑
    stage_code = _STAGE_BY_BRIGADE.get(brigade)
    active = await b24_list(
        "crm.deal.list",
        filter={"CLOSED": "N", "STAGE_ID": f"C20:{stage_code}"},
        select=["ID"],
    )
    active_count = len(active)

    # –≥–∞—Ä–Ω–∏–π –≤–∏–≤—ñ–¥
    date_str = day.strftime("%d.%m.%Y")
    lines = [
        f"<b>–ë—Ä–∏–≥–∞–¥–∞ ‚Ññ{brigade}, {date_str}</b>",
        "",
        f"<b>–ó–∞–∫—Ä–∏—Ç–æ –∑–∞–¥–∞—á:</b> {total}",
    ]
    # –±–∞–∂–∞–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—ñ–¥—Å—Ç–∞–≤–∏–º–æ, —è–∫—â–æ —î
    for name in ("–ê–≤–∞—Ä—ñ–π–Ω—ñ —Ä–æ–±–æ—Ç–∏", "–†–µ–º–æ–Ω—Ç", "–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è", "–°–µ—Ä–≤—ñ—Å–Ω—ñ —Ä–æ–±–æ—Ç–∏"):
        if name in by_type:
            lines.append(f"{name} ‚Äî {by_type[name]}")
    # —ñ–Ω—à—ñ —Ç–∏–ø–∏ (—è–∫–∏—Ö –Ω–µ –±—É–ª–æ —É –ø–µ—Ä–µ–ª—ñ–∫—É)
    other_types = [k for k in by_type.keys() if k not in {"–ê–≤–∞—Ä—ñ–π–Ω—ñ —Ä–æ–±–æ—Ç–∏", "–†–µ–º–æ–Ω—Ç", "–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è", "–°–µ—Ä–≤—ñ—Å–Ω—ñ —Ä–æ–±–æ—Ç–∏"}]
    for k in sorted(other_types):
        lines.append(f"{k} ‚Äî {by_type[k]}")

    lines += [
        "",
        f"<b>–ó–∞–¥–∞—á —É –∫–æ–ª–æ–Ω—Ü—ñ –±—Ä–∏–≥–∞–¥–∏:</b> {active_count}",
    ]
    return "\n".join(lines)


@dp.message(F.text == "üìä –ó–≤—ñ—Ç –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ")
async def report_today(m: Message):
    text = await _report_for_day(m.from_user.id, datetime.now())
    if isinstance(text, tuple):
        await m.answer(text[0], reply_markup=pick_brigade_inline_kb())
    else:
        await m.answer(text, reply_markup=main_menu_kb())


@dp.message(F.text == "üìâ –ó–≤—ñ—Ç –∑–∞ –≤—á–æ—Ä–∞")
async def report_yesterday(m: Message):
    text = await _report_for_day(m.from_user.id, datetime.now() - timedelta(days=1))
    if isinstance(text, tuple):
        await m.answer(text[0], reply_markup=pick_brigade_inline_kb())
    else:
        await m.answer(text, reply_markup=main_menu_kb())


# ----------------------------- Webhook plumbing ----------------------------

@app.on_event("startup")
async def on_startup():
    global HTTP
    HTTP = aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=30))

    await bot.set_my_commands([
        BotCommand(command="start", description="–ü–æ—á–∞—Ç–∏"),
        BotCommand(command="menu", description="–ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é"),
        BotCommand(command="set_brigade", description="–í–∏–±—Ä–∞—Ç–∏ –±—Ä–∏–≥–∞–¥—É"),
        BotCommand(command="deal_dump", description="–ü–æ–∫–∞–∑–∞—Ç–∏ dump —É–≥–æ–¥–∏"),
    ])

    url = f"{settings.WEBHOOK_BASE.rstrip('/')}/webhook/{settings.WEBHOOK_SECRET}"
    log.info("[startup] setting webhook to: %s", url)
    await bot.set_webhook(url)


@app.on_event("shutdown")
async def on_shutdown():
    await bot.delete_webhook()
    await HTTP.close()
    await bot.session.close()


@app.post("/webhook/{secret}")
async def telegram_webhook(secret: str, request: Request):
    if secret != settings.WEBHOOK_SECRET:
        return {"ok": False}
    update = Update.model_validate(await request.json())
    await dp.feed_update(bot, update)
    return {"ok": True}
