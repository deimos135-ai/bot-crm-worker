# app_web/main.py
import asyncio
import html
import json
import logging
import re
from datetime import datetime, timedelta, timezone
from typing import Any, Dict, List, Optional, Tuple

import aiohttp
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
    BotCommand,
    Message,
    Update,
    CallbackQuery,
    Contact,
)

from shared.settings import settings

# ----------------------------- Logging -------------------------------------
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(name)s: %(message)s")
log = logging.getLogger("app")

# ----------------------------- App / Bot -----------------------------------
app = FastAPI()
bot = Bot(token=settings.BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# ----------------------------- Bitrix helpers ------------------------------
B24_BASE = settings.BITRIX_WEBHOOK_BASE.rstrip("/")
HTTP: aiohttp.ClientSession

async def b24(method: str, **params) -> Any:
    """Single call to Bitrix REST method."""
    url = f"{B24_BASE}/{method}.json"
    async with HTTP.post(url, json=params) as resp:
        data = await resp.json()
        if "error" in data:
            raise RuntimeError(f"B24 error: {data['error']}: {data.get('error_description')}")
        return data.get("result")

async def b24_list(method: str, *, page_size: int = 200, throttle: float = 0.2, **params) -> List[Dict[str, Any]]:
    """Paginator for Bitrix list endpoints."""
    start = 0
    items: List[Dict[str, Any]] = []
    while True:
        payload = dict(params)
        payload["start"] = start
        res = await b24(method, **payload)
        chunk = res or []
        if isinstance(chunk, dict) and "items" in chunk:
            chunk = chunk.get("items", [])
        items.extend(chunk)
        log.info("[b24_list] %s got %s items (total %s) start=%s", method, len(chunk), len(items), start)
        if len(chunk) < page_size:
            break
        start += page_size
        if throttle:
            await asyncio.sleep(throttle)
    return items

# ----------------------------- AUTH (in-memory) ----------------------------
# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ñ–π –ø–∞–º'—è—Ç—ñ –ø—Ä–æ—Ü–µ—Å–∞
_AUTH_OK: Dict[int, bool] = {}         # tg_user_id -> authed?
# –ë—Ä–∏–≥–∞–¥–∞ ‚Äî —Ç–∞–∫–æ–∂ —É –ø–∞–º'—è—Ç—ñ (—è–∫ –±—É–ª–æ —É —Ç–≤–æ—ó–π –ø–µ—Ä—à—ñ–π —Ä–µ–≤—ñ–∑—ñ—ó)
_USER_BRIGADE: Dict[int, int] = {}     # tg_user_id -> brigade number

def is_authed_sync(uid: int) -> bool:
    return _AUTH_OK.get(uid, False)

def mark_authed(uid: int) -> None:
    _AUTH_OK[uid] = True

def get_user_brigade(user_id: int) -> Optional[int]:
    return _USER_BRIGADE.get(user_id)

def set_user_brigade(user_id: int, brigade: int) -> None:
    _USER_BRIGADE[user_id] = brigade

def request_phone_kb() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]],
        resize_keyboard=True, one_time_keyboard=True, selective=False
    )
    return kb

# –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–µ–ª–µ—Ñ–æ–Ω—É –∑ Telegram/Bitrix –¥–æ —Ü–∏—Ñ—Ä, –±–µ–∑ –ø—Ä–æ–±—ñ–ª—ñ–≤/-, –∑—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º –∫—Ä–∞—ó–Ω–∏.
def _digits_only(s: str) -> str:
    return re.sub(r"\D+", "", s or "")

def normalize_phone(raw: str) -> Tuple[str, List[str]]:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î (digits, variants) –¥–ª—è –ø–æ—à—É–∫—É —É Bitrix user.search / user.get
    –ü—Ä–∏–∫–ª–∞–¥–∏:

    """
    digits = _digits_only(raw)
    variants: List[str] = []
    if not digits:
        return "", variants

    # –≥–æ—Ç—É—î–º–æ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –ø–æ–ª—ñ–≤ —ñ —Ä—ñ–∑–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É –≤–≤–µ–¥–µ–Ω–Ω—è
    v_e164 = digits if digits.startswith("380") else f"38{digits}" if digits.startswith("0") else digits
    v_e164_plus = f"+{v_e164}"
    v_nat = digits[-10:] if len(digits) >= 10 else digits  # 0XXXXXXXXX –∞–±–æ –±–µ–∑ 0
    if len(v_nat) == 10 and not v_nat.startswith("0"):
        v_nat = f"0{v_nat}" if len(v_nat) == 9 else v_nat
    v_tail9 = v_nat[-9:] if len(v_nat) >= 9 else v_nat

    # –ü–æ—Ä—è–¥–æ–∫ –≤–∞–∂–ª–∏–≤–∏–π ‚Äî –≤—ñ–¥ –±—ñ–ª—å—à —Ç–æ—á–Ω–æ–≥–æ –¥–æ –±—ñ–ª—å—à ¬´–≤—ñ–ª—å–Ω–æ–≥–æ¬ª
    variants = [v_e164, digits, v_e164_plus, v_nat, v_tail9]
    # —É–Ω—ñ–∫–∞–ª—ñ–∑—É—î–º–æ, –∑–±–µ—Ä—ñ–≥—à–∏ –ø–æ—Ä—è–¥–æ–∫
    seen = set()
    uniq: List[str] = []
    for v in variants:
        if v and v not in seen:
            uniq.append(v)
            seen.add(v)
    return digits, uniq

async def b24_find_employee_by_phone(raw_phone: str) -> Optional[Dict[str, Any]]:
    """
    –®—É–∫–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —Å–µ—Ä–µ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ Bitrix (—Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤).
    –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ.
    """
    digits, variants = normalize_phone(raw_phone)
    log.info("[contact] raw='%s' digits='%s' variants=%s", raw_phone, digits, variants)
    if not digits:
        return None

    # 1) user.search –ø–æ FIND
    for v in variants:
        try:
            log.info("[b24.find] user.search FIND='%s'", v)
            users = await b24("user.search", FIND=v)
            log.info("[b24.find] user.search FIND='%s' -> %s users", v, len(users or []))
            if users:
                # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞ –ø–æ–ª—è–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ –¥–ª—è –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ
                for u in users:
                    phones = [
                        (u.get("WORK_PHONE") or "").strip() or None,
                        (u.get("PERSONAL_PHONE") or "").strip() or None,
                        (u.get("PERSONAL_MOBILE") or "").strip() or None,
                    ]
                    phones = [p for p in phones if p]
                    if any(_digits_only(p).endswith(digits[-9:]) for p in phones):
                        log.info("[b24.find] MATCH(search) uid=%s name='%s' phones=%s raw='%s'",
                                 u.get("ID"), f"{u.get('NAME','')} {u.get('LAST_NAME','')}".strip(), phones, raw_phone)
                        return u
        except Exception as e:
            log.warning("[b24.find] user.search error for '%s': %s", v, e)

    # 2) user.get –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö –ø–æ–ª—è—Ö (–Ω–∞–π—Ç–∏–ø–æ–≤—ñ—à—ñ)
    for field in ("PERSONAL_MOBILE", "PERSONAL_PHONE", "WORK_PHONE"):
        for v in variants:
            try:
                # Bitrix user.get: FILTER={FIELD: 'value'}
                filt = {field: v}
                log.info("[b24.find] user.get FILTER=%s", filt)
                u = await b24("user.get", FILTER=filt)
                if isinstance(u, list) and u:
                    u = u[0]
                if u and isinstance(u, dict):
                    phones = [
                        (u.get("WORK_PHONE") or "").strip() or None,
                        (u.get("PERSONAL_PHONE") or "").strip() or None,
                        (u.get("PERSONAL_MOBILE") or "").strip() or None,
                    ]
                    phones = [p for p in phones if p]
                    log.info("[b24.find] MATCH(get) uid=%s name='%s' phones=%s raw='%s'",
                             u.get("ID"), f"{u.get('NAME','')} {u.get('LAST_NAME','')}".strip(), phones, raw_phone)
                    return u
            except Exception as e:
                log.warning("[b24.find] user.get error field=%s v='%s': %s", field, v, e)

    log.info("[b24.find] no matches for raw='%s'", raw_phone)
    return None

async def ensure_authed_or_ask(m: Message) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é; —è–∫—â–æ –Ω—ñ ‚Äî –ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—å –Ω–æ–º–µ—Ä–æ–º. –ü–æ–≤–µ—Ä—Ç–∞—î True —è–∫—â–æ –≤–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π."""
    if is_authed_sync(m.from_user.id):
        return True
    await m.answer(
        "–©–æ–± –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ –±–æ—Ç–æ–º, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å ‚Äî –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É üëá",
        reply_markup=request_phone_kb()
    )
    return False

# ----------------------------- Caches --------------------------------------
_DEAL_TYPE_MAP: Optional[Dict[str, str]] = None
_ROUTER_ENUM_MAP: Optional[Dict[str, str]] = None      # UF_CRM_1602756048
_TARIFF_ENUM_MAP: Optional[Dict[str, str]] = None      # UF_CRM_1610558031277
_FACT_ENUM_LIST: Optional[List[Tuple[str, str]]] = None  # (VALUE, NAME)

async def get_deal_type_map() -> Dict[str, str]:
    global _DEAL_TYPE_MAP
    if _DEAL_TYPE_MAP is None:
        items = await b24("crm.status.list", filter={"ENTITY_ID": "DEAL_TYPE"})
        _DEAL_TYPE_MAP = {i["STATUS_ID"]: i["NAME"] for i in items}
        log.info("[cache] DEAL_TYPE map loaded: %s entries", len(_DEAL_TYPE_MAP))
    return _DEAL_TYPE_MAP

async def _enum_map_for_userfield(field_name: str) -> Dict[str, str]:
    fields = await b24("crm.deal.userfield.list", order={"SORT": "ASC"})
    uf = next((f for f in fields if f.get("FIELD_NAME") == field_name), None)
    options: Dict[str, str] = {}
    if uf and isinstance(uf.get("LIST"), list):
        for o in uf["LIST"]:
            options[str(o["ID"])] = o["VALUE"]
    return options

async def get_router_enum_map() -> Dict[str, str]:
    global _ROUTER_ENUM_MAP
    if _ROUTER_ENUM_MAP is None:
        _ROUTER_ENUM_MAP = await _enum_map_for_userfield("UF_CRM_1602756048")
    return _ROUTER_ENUM_MAP

async def get_tariff_enum_map() -> Dict[str, str]:
    global _TARIFF_ENUM_MAP
    if _TARIFF_ENUM_MAP is None:
        _TARIFF_ENUM_MAP = await _enum_map_for_userfield("UF_CRM_1610558031277")
    return _TARIFF_ENUM_MAP

async def get_fact_enum_list() -> List[Tuple[str, str]]:
    """
    UF_CRM_1602766787968: –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ (option_id, option_name).
    option_id = LIST[].ID, option_name = LIST[].VALUE
    """
    global _FACT_ENUM_LIST
    if _FACT_ENUM_LIST is None:
        fields = await b24("crm.deal.userfield.list", order={"SORT": "ASC"})
        uf = next((f for f in fields if f.get("FIELD_NAME") == "UF_CRM_1602766787968"), None)
        lst: List[Tuple[str, str]] = []
        if uf and isinstance(uf.get("LIST"), list):
            for o in uf["LIST"]:
                opt_id = str(o.get("ID") or "")
                opt_name = str(o.get("VALUE") or "")
                if not opt_id:
                    continue
                lst.append((opt_id, opt_name))
        _FACT_ENUM_LIST = lst
        log.info("[cache] FACT enum loaded: %s options", len(_FACT_ENUM_LIST))
    return _FACT_ENUM_LIST

# ----------------------------- UI helpers ----------------------------------
def main_menu_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì¶ –ú–æ—ó —É–≥–æ–¥–∏")],
            [KeyboardButton(text="üìã –ú–æ—ó –∑–∞–¥–∞—á—ñ")],
            [KeyboardButton(text="üìä –ó–≤—ñ—Ç –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ")],
            [KeyboardButton(text="üìâ –ó–≤—ñ—Ç –∑–∞ –≤—á–æ—Ä–∞")],
        ],
        resize_keyboard=True,
        one_time_keyboard=False,
        selective=False,
    )

def pick_brigade_inline_kb() -> InlineKeyboardMarkup:
    rows = [
        [InlineKeyboardButton(text=f"–ë—Ä–∏–≥–∞–¥–∞ ‚Ññ{i}", callback_data=f"setbrig:{i}")]
        for i in (1, 2, 3, 4, 5)
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)

# ----------------------------- Deal rendering ------------------------------
def _strip_bb(text: str) -> str:
    if not text:
        return ""
    t = re.sub(r"\[/?p\]", "", text, flags=re.I)
    return t.strip()

def _money_pair(val: Optional[str]) -> Optional[str]:
    if not val:
        return None
    parts = str(val).split("|", 1)
    if len(parts) == 2:
        return f"{parts[0]} {parts[1]}"
    return val

async def render_deal_card(deal: Dict[str, Any]) -> str:
    deal_type_map = await get_deal_type_map()
    router_map = await get_router_enum_map()
    tariff_map = await get_tariff_enum_map()

    deal_id = deal.get("ID")
    title = deal.get("TITLE") or f"Deal #{deal_id}"
    type_code = deal.get("TYPE_ID") or ""
    type_name = deal_type_map.get(type_code, type_code or "‚Äî")
    category = deal.get("CATEGORY_ID", "‚Äî")

    address_value = deal.get("UF_CRM_6009542BC647F") or deal.get("ADDRESS") or "‚Äî"

    router_id = str(deal.get("UF_CRM_1602756048") or "")
    router_name = router_map.get(router_id) if router_id else "‚Äî"
    router_price = _money_pair(deal.get("UF_CRM_1604468981320")) or "‚Äî"

    tariff_id = str(deal.get("UF_CRM_1610558031277") or "")
    tariff_name = tariff_map.get(tariff_id) if tariff_id else "‚Äî"
    tariff_price = _money_pair(deal.get("UF_CRM_1611652685839")) or "‚Äî"

    install_price = _money_pair(deal.get("UF_CRM_1609868447208")) or "‚Äî"

    comments = _strip_bb(deal.get("COMMENTS") or "")

    contact_name = "‚Äî"
    contact_phone = ""
    if deal.get("CONTACT_ID"):
        try:
            c = await b24("crm.contact.get", id=deal["CONTACT_ID"])
            if c:
                contact_name = f"{c.get('NAME', '')} {c.get('SECOND_NAME', '')} {c.get('LAST_NAME', '')}".strip() or "‚Äî"
                phones = c.get("PHONE") or []
                if isinstance(phones, list) and phones:
                    contact_phone = phones[0].get("VALUE") or ""
        except Exception as e:
            log.warning("contact.get failed: %s", e)

    # –©–æ –∑—Ä–æ–±–ª–µ–Ω–æ + –ü—Ä–∏—á–∏–Ω–∞ —Ä–µ–º–æ–Ω—Ç—É
    fact_val = str(deal.get("UF_CRM_1602766787968") or "")
    fact_name = "‚Äî"
    if fact_val:
        facts = await get_fact_enum_list()
        fact_name = next((name for val, name in facts if val == fact_val), fact_val)

    reason_text = (deal.get("UF_CRM_1702456465911") or "").strip() or "‚Äî"

    head = f"#{deal_id} ‚Ä¢ {html.escape(title)}"
    link = f"https://{settings.B24_DOMAIN}/crm/deal/details/{deal_id}/"

    contact_line = f"<b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {html.escape(contact_name)}"
    if contact_phone:
        contact_line += f" ‚Ä¢ {html.escape(contact_phone)}"

    body_lines = [
        f"<b>–¢–∏–ø —É–≥–æ–¥–∏:</b> {html.escape(type_name)}",
        f"<b>–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:</b> {html.escape(str(category))}",
        f"<b>–ê–¥—Ä–µ—Å–∞:</b> {html.escape(address_value)}",
        "",
        f"<b>–†–æ—É—Ç–µ—Ä:</b> {html.escape(router_name)}",
        f"<b>–í–∞—Ä—Ç—ñ—Å—Ç—å —Ä–æ—É—Ç–µ—Ä–∞:</b> {html.escape(router_price)}",
        "",
        f"<b>–¢–∞—Ä–∏—Ñ:</b> {html.escape(tariff_name)}",
        f"<b>–í–∞—Ä—Ç—ñ—Å—Ç—å —Ç–∞—Ä–∏—Ñ—É:</b> {html.escape(tariff_price)}",
        f"<b>–í–∞—Ä—Ç—ñ—Å—Ç—å –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:</b> {html.escape(install_price)}",
        "",
        f"<b>–ö–æ–º–µ–Ω—Ç–∞—Ä:</b> {html.escape(comments) if comments else '‚Äî'}",
        "",
        f"<b>–©–æ –∑—Ä–æ–±–ª–µ–Ω–æ:</b> {html.escape(fact_name)}",
        f"<b>–ü—Ä–∏—á–∏–Ω–∞ —Ä–µ–º–æ–Ω—Ç—É:</b> {html.escape(reason_text)}",
        "",
        contact_line,
        "",
        f"<a href=\"{link}\">–í—ñ–¥–∫—Ä–∏—Ç–∏ –≤ CRM</a>",
    ]
    return f"<b>{head}</b>\n\n" + "\n".join(body_lines)

def deal_keyboard(deal: Dict[str, Any]) -> InlineKeyboardMarkup:
    deal_id = str(deal.get("ID"))
    kb = [[InlineKeyboardButton(text="‚úÖ –ó–∞–∫—Ä–∏—Ç–∏ —É–≥–æ–¥—É", callback_data=f"close:{deal_id}")]]
    return InlineKeyboardMarkup(inline_keyboard=kb)

async def send_deal_card(chat_id: int, deal: Dict[str, Any]) -> None:
    text = await render_deal_card(deal)
    await bot.send_message(chat_id, text, reply_markup=deal_keyboard(deal), disable_web_page_preview=True)

# ----------------------------- Brigade mapping -----------------------------
# mapping "brigade number" -> UF_CRM_1611995532420[] option IDs (brigade items)
_BRIGADE_EXEC_OPTION_ID = {1: 5494, 2: 5496, 3: 5498, 4: 5500, 5: 5502}
# mapping brigade -> stage code in pipeline C20
_BRIGADE_STAGE = {1: "UC_XF8O6V", 2: "UC_0XLPCN", 3: "UC_204CP3", 4: "UC_TNEW3Z", 5: "UC_RMBZ37"}

# ----------------------------- Close wizard --------------------------------
_PENDING_CLOSE: Dict[int, Dict[str, Any]] = {}
_FACTS_PER_PAGE = 8  # 1 –æ–ø—Ü—ñ—è = 1 —Ä—è–¥–æ–∫; –ø–∞–≥—ñ–Ω–∞—Ü—ñ—è –ø–æ 8

def _facts_page_kb(deal_id: str, page: int, facts: List[Tuple[str, str]]) -> InlineKeyboardMarkup:
    rows: List[List[InlineKeyboardButton]] = []
    total_pages = max(1, (len(facts) + _FACTS_PER_PAGE - 1) // _FACTS_PER_PAGE)
    page = max(0, min(page, total_pages - 1))

    start = page * _FACTS_PER_PAGE
    chunk = facts[start:start + _FACTS_PER_PAGE]

    for val, name in chunk:
        rows.append([InlineKeyboardButton(text=name[:64], callback_data=f"factsel:{deal_id}:{val}")])

    if total_pages > 1:
        nav: List[InlineKeyboardButton] = []
        if page > 0:
            nav.append(InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data=f"factpage:{deal_id}:{page-1}"))
        nav.append(InlineKeyboardButton(text=f"–°—Ç–æ—Ä. {page+1}/{total_pages}", callback_data="noop"))
        if page + 1 < total_pages:
            nav.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ¬ª", callback_data=f"factpage:{deal_id}:{page+1}"))
        rows.append(nav)

    rows.append([InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f"cmtcancel:{deal_id}")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

async def _finalize_close(user_id: int, deal_id: str, fact_val: str, fact_name: str, reason_text: str) -> None:
    deal = await b24("crm.deal.get", id=deal_id)
    if not deal:
        raise RuntimeError("Deal not found")
    category = str(deal.get("CATEGORY_ID") or "0")
    target_stage = f"C{category}:WON"

    prev_comments = _strip_bb(deal.get("COMMENTS") or "")
    block = f"[p]<b>–ó–∞–∫—Ä–∏—Ç—Ç—è:</b> {html.escape(fact_name)}[/p]"
    if reason_text:
        block += f"\n[p]<b>–ü—Ä–∏—á–∏–Ω–∞ —Ä–µ–º–æ–Ω—Ç—É:</b> {html.escape(reason_text)}[/p]"
    new_comments = block if not prev_comments else f"{prev_comments}\n\n{block}"

    brigade = get_user_brigade(user_id)
    exec_list = []
    if brigade and brigade in _BRIGADE_EXEC_OPTION_ID:
        exec_list = [_BRIGADE_EXEC_OPTION_ID[brigade]]

    fields = {
        "STAGE_ID": target_stage,
        "COMMENTS": new_comments,
        "UF_CRM_1602766787968": fact_val,     # –©–æ –ø–æ —Ñ–∞–∫—Ç—É –∑—Ä–æ–±–∏–ª–∏ (enum VALUE)
        "UF_CRM_1702456465911": reason_text,  # –ü—Ä–∏—á–∏–Ω–∞ —Ä–µ–º–æ–Ω—Ç—É (free text)
    }
    if exec_list:
        fields["UF_CRM_1611995532420"] = exec_list  # –í–∏–∫–æ–Ω–∞–≤–µ—Ü—å (multi)

    await b24("crm.deal.update", id=deal_id, fields=fields)

# ----------------------------- Report taxonomy -----------------------------
REPORT_CLASS_LABELS = {
    "connection": "–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è",
    "repair": "–†–µ–º–æ–Ω—Ç–∏",
    "service": "–°–µ—Ä–≤—ñ—Å–Ω—ñ —Ä–æ–±–æ—Ç–∏",
    "reconnection": "–ü–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è",
    "accident": "–ê–≤–∞—Ä—ñ—ó",
    "construction": "–ë—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–æ",
    "linework": "–†–æ–±–æ—Ç–∏ –ø–æ –ª—ñ–Ω—ñ—ó",
    "cc_request": "–ó–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –ö–¶",
    "other": "–Ü–Ω—à–µ",
}

REPORT_CLASS_ORDER = [
    "accident",
    "repair",
    "connection",
    "service",
    "reconnection",
    "construction",
    "linework",
    "cc_request",
    "other",
]

def normalize_type(type_name: str) -> str:
    """
    –ú–∞–ø–∏–º–æ –Ω–∞–∑–≤—É —Ç–∏–ø—É —É–≥–æ–¥–∏ (Bitrix, –±—É–¥—å-—è–∫–æ—é –º–æ–≤–æ—é) —É –Ω–∞—à –∫–ª–∞—Å –∑–≤—ñ—Ç—É.
    """
    t = (type_name or "").strip().lower()

    mapping_exact = {
        "–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è": "connection",
        "–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ": "connection",

        "—Ä–µ–º–æ–Ω—Ç": "repair",

        "—Å–µ—Ä–≤—ñ—Å–Ω—ñ —Ä–æ–±–æ—Ç–∏": "service",
        "—Å–µ—Ä–≤–∏—Å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã": "service",
        "—Å–µ—Ä–≤—ñ—Å": "service",
        "—Å–µ—Ä–≤–∏—Å": "service",

        "–ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è": "reconnection",
        "–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ": "reconnection",

        "–∞–≤–∞—Ä—ñ—è": "accident",
        "–∞–≤–∞—Ä–∏—è": "accident",

        "–±—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–æ": "construction",
        "—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ": "construction",

        "—Ä–æ–±–æ—Ç–∏ –ø–æ –ª—ñ–Ω—ñ—ó": "linework",
        "—Ä–∞–±–æ—Ç—ã –ø–æ –ª–∏–Ω–∏–∏": "linework",

        "–∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –∫—Ü": "cc_request",
        "–æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –∫—Ü": "cc_request",

        "–Ω–µ –≤—ã–±—Ä–∞–Ω": "other",
        "–Ω–µ –≤–∏–±—Ä–∞–Ω–æ": "other",
        "—ñ–Ω—à–µ": "other",
        "–ø—Ä–æ—á–µ–µ": "other",
    }
    if t in mapping_exact:
        return mapping_exact[t]

    # –º'—è–∫—ñ –ø—Ä–∞–≤–∏–ª–∞
    if any(k in t for k in ("–ø—ñ–¥–∫–ª—é—á", "–ø–æ–¥–∫–ª—é—á")):
        return "connection"
    if "—Ä–µ–º–æ–Ω—Ç" in t:
        return "repair"
    if any(k in t for k in ("—Å–µ—Ä–≤—ñ—Å", "—Å–µ—Ä–≤–∏—Å")):
        return "service"
    if any(k in t for k in ("–ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á", "–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á")):
        return "reconnection"
    if any(k in t for k in ("–∞–≤–∞—Ä",)):
        return "accident"
    if any(k in t for k in ("–±—É–¥—ñ–≤–Ω–∏—Ü", "—Å—Ç—Ä–æ–∏—Ç")):
        return "construction"
    if any(k in t for k in ("–ª—ñ–Ω—ñ", "–ª–∏–Ω–∏–∏")):
        return "linework"
    if any(k in t for k in ("–∫—Ü", "–∫–æ–Ω—Ç–∞–∫—Ç-—Ü–µ–Ω—Ç—Ä", "–∫–æ–ª–ª-—Ü–µ–Ω—Ç—Ä", "call")):
        return "cc_request"
    return "other"

# ----------------------------- Report helpers ------------------------------
def _tz_ua_now() -> datetime:
    return datetime.now(timezone.utc)

def _day_bounds(offset_days: int = 0) -> Tuple[str, str, str]:
    now = _tz_ua_now()
    start = (now + timedelta(days=-offset_days)).replace(hour=0, minute=0, second=0, microsecond=0)
    end = start + timedelta(days=1)
    label = start.astimezone(timezone.utc).strftime("%d.%m.%Y")
    return label, start.isoformat(), end.isoformat()

async def build_daily_report(brigade: int, offset_days: int) -> Tuple[str, Dict[str, int], int]:
    if brigade not in _BRIGADE_STAGE:
        raise RuntimeError("Unknown brigade")

    label, frm, to = _day_bounds(offset_days)
    deal_type_map = await get_deal_type_map()

    exec_opt = _BRIGADE_EXEC_OPTION_ID.get(brigade)
    filter_closed = {"STAGE_ID": "C20:WON", ">=DATE_MODIFY": frm, "<DATE_MODIFY": to}
    if exec_opt:
        filter_closed["UF_CRM_1611995532420"] = exec_opt

    log.info("[report] closed filter: %s", filter_closed)

    closed_deals = await b24_list(
        "crm.deal.list",
        order={"DATE_MODIFY": "ASC"},
        filter=filter_closed,
        select=["ID", "TYPE_ID"],
        page_size=200,
    )
    log.info("[report] closed deals fetched: %s", len(closed_deals))

    counts: Dict[str, int] = {k: 0 for k in REPORT_CLASS_LABELS.keys()}
    for d in closed_deals:
        tcode = d.get("TYPE_ID") or ""
        tname = deal_type_map.get(tcode, tcode)
        cls = normalize_type(tname)
        counts[cls] = counts.get(cls, 0) + 1

    stage_code = _BRIGADE_STAGE[brigade]
    filter_active = {"CLOSED": "N", "STAGE_ID": f"C20:{stage_code}"}
    log.info("[report] active filter: %s", filter_active)

    active_deals = await b24_list(
        "crm.deal.list",
        order={"ID": "DESC"},
        filter=filter_active,
        select=["ID"],
        page_size=200,
    )
    active_left = len(active_deals)
    log.info("[report] active deals fetched: %s", active_left)

    return label, counts, active_left

def format_report(brigade: int, date_label: str, counts: Dict[str, int], active_left: int) -> str:
    total = sum(counts.values())
    lines = [
        f"<b>–ë—Ä–∏–≥–∞–¥–∞ ‚Ññ{brigade} ‚Äî {date_label}</b>",
        "",
        f"<b>–ó–∞–∫—Ä–∏—Ç–æ –∑–∞–¥–∞—á:</b> {total}",
        "",
    ]
    # –ø–æ–∫–∞–∑—É—î–º–æ —É —Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É, —Ö–æ–≤–∞—î–º–æ –Ω—É–ª—ñ
    for key in REPORT_CLASS_ORDER:
        val = counts.get(key, 0)
        if val:
            lines.append(f"{REPORT_CLASS_LABELS.get(key, key)} ‚Äî {val}")

    if len(lines) > 3 and lines[-1] != "":
        lines.append("")

    lines.append(f"<b>–ê–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–¥–∞—á –Ω–∞ –±—Ä–∏–≥–∞–¥—ñ –∑–∞–ª–∏—à–∏–ª–æ—Å—å:</b> {active_left}")
    return "\n".join(lines)

# ----------------------------- Handlers ------------------------------------
@dp.message(Command("start"))
async def cmd_start(m: Message):
    # 1) –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è
    if not is_authed_sync(m.from_user.id):
        await m.answer(
            "–ì–æ—Ç–æ–≤—ñ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ ‚úÖ\n\n–©–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É .",
            reply_markup=request_phone_kb()
        )
        return

    # 2) —è–∫ –±—É–ª–æ
    b = get_user_brigade(m.from_user.id)
    text = "–ì–æ—Ç–æ–≤—ñ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ ‚úÖ"
    if b:
        text += f"\n–ü–æ—Ç–æ—á–Ω–∞ –±—Ä–∏–≥–∞–¥–∞: ‚Ññ{b}"
    else:
        text += "\n–û–±–µ—Ä—ñ—Ç—å –≤–∞—à—É –±—Ä–∏–≥–∞–¥—É –Ω–∏–∂—á–µ ‚¨áÔ∏è"
    await m.answer(text, reply_markup=main_menu_kb())
    if not b:
        await m.answer("–®–≤–∏–¥–∫–∏–π –≤–∏–±—ñ—Ä –±—Ä–∏–≥–∞–¥–∏:", reply_markup=pick_brigade_inline_kb())

@dp.message(Command("menu"))
async def cmd_menu(m: Message):
    if not is_authed_sync(m.from_user.id):
        await ensure_authed_or_ask(m)
        return
    await m.answer("–ú–µ–Ω—é –≤—ñ–¥–∫—Ä–∏—Ç–æ üëá", reply_markup=main_menu_kb())

@dp.message(Command("set_brigade"))
async def cmd_set_brigade(m: Message):
    if not is_authed_sync(m.from_user.id):
        await ensure_authed_or_ask(m)
        return
    parts = (m.text or "").split(maxsplit=1)
    if len(parts) < 2:
        await m.answer("–í–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä –±—Ä–∏–≥–∞–¥–∏: /set_brigade 1", reply_markup=main_menu_kb())
        await m.answer("–ê–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É:", reply_markup=pick_brigade_inline_kb())
        return
    try:
        brigade = int(parts[1])
    except ValueError:
        await m.answer("–ù–æ–º–µ—Ä –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º: 1..5", reply_markup=main_menu_kb())
        return
    if brigade not in (1, 2, 3, 4, 5):
        await m.answer("–î–æ—Å—Ç—É–ø–Ω—ñ –±—Ä–∏–≥–∞–¥–∏: 1..5", reply_markup=main_menu_kb())
        return
    set_user_brigade(m.from_user.id, brigade)
    await m.answer(f"‚úÖ –ü—Ä–∏–≤‚Äô—è–∑–∞–Ω–æ –¥–æ –±—Ä–∏–≥–∞–¥–∏ ‚Ññ{brigade}", reply_markup=main_menu_kb())

@dp.callback_query(F.data.startswith("setbrig:"))
async def cb_setbrig(c: CallbackQuery):
    if not is_authed_sync(c.from_user.id):
        await c.answer()
        await c.message.answer("–°–ø–µ—Ä—à—É –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å ‚Äî –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É:", reply_markup=request_phone_kb())
        return
    await c.answer()
    try:
        brigade = int(c.data.split(":", 1)[1])
    except Exception:
        await c.message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä –±—Ä–∏–≥–∞–¥–∏.", reply_markup=main_menu_kb())
        return
    if brigade not in (1, 2, 3, 4, 5):
        await c.message.answer("–î–æ—Å—Ç—É–ø–Ω—ñ –±—Ä–∏–≥–∞–¥–∏: 1..5", reply_markup=main_menu_kb())
        return
    set_user_brigade(c.from_user.id, brigade)
    await c.message.answer(f"‚úÖ –û–±—Ä–∞–Ω–æ –±—Ä–∏–≥–∞–¥—É ‚Ññ{brigade}", reply_markup=main_menu_kb())

@dp.message(F.text == "üì¶ –ú–æ—ó —É–≥–æ–¥–∏")
async def msg_my_deals(m: Message):
    if not is_authed_sync(m.from_user.id):
        await ensure_authed_or_ask(m)
        return
    brigade = get_user_brigade(m.from_user.id)
    if not brigade:
        await m.answer("–°–ø–µ—Ä—à—É –æ–±–µ—Ä—ñ—Ç—å –±—Ä–∏–≥–∞–¥—É:", reply_markup=pick_brigade_inline_kb())
        return
    stage_code = _BRIGADE_STAGE.get(brigade)
    if not stage_code:
        await m.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä –±—Ä–∏–≥–∞–¥–∏.", reply_markup=main_menu_kb())
        return

    await m.answer(f"üì¶ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é —É–≥–æ–¥–∏ –¥–ª—è –±—Ä–∏–≥–∞–¥–∏ ‚Ññ{brigade}‚Ä¶", reply_markup=main_menu_kb())

    deals: List[Dict[str, Any]] = await b24_list(
        "crm.deal.list",
        filter={"CLOSED": "N", "STAGE_ID": f"C20:{stage_code}"},
        order={"DATE_CREATE": "DESC"},
        select=[
            "ID", "TITLE", "TYPE_ID", "CATEGORY_ID", "STAGE_ID",
            "COMMENTS", "CONTACT_ID",
            "UF_CRM_6009542BC647F", "ADDRESS",
            "UF_CRM_1602756048", "UF_CRM_1604468981320",
            "UF_CRM_1610558031277", "UF_CRM_1611652685839",
            "UF_CRM_1609868447208",
            # –¥–ª—è –∫–∞—Ä—Ç–∫–∏:
            "UF_CRM_1602766787968",     # –©–æ –∑—Ä–æ–±–ª–µ–Ω–æ
            "UF_CRM_1702456465911",     # –ü—Ä–∏—á–∏–Ω–∞ —Ä–µ–º–æ–Ω—Ç—É
        ],
        page_size=100,
    )
    if not deals:
        await m.answer("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —É–≥–æ–¥.", reply_markup=main_menu_kb())
        return
    for d in deals[:25]:
        await send_deal_card(m.chat.id, d)

@dp.callback_query(F.data == "my_deals")
async def cb_my_deals(c: CallbackQuery):
    if not is_authed_sync(c.from_user.id):
        await c.answer()
        await c.message.answer("–°–ø–µ—Ä—à—É –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å ‚Äî –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É:", reply_markup=request_phone_kb())
        return
    await c.answer()
    await msg_my_deals(c.message)

@dp.message(F.text == "üìã –ú–æ—ó –∑–∞–¥–∞—á—ñ")
async def msg_tasks(m: Message):
    if not is_authed_sync(m.from_user.id):
        await ensure_authed_or_ask(m)
        return
    await m.answer("–ó–∞–¥–∞—á—ñ —â–µ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ üõ†Ô∏è", reply_markup=main_menu_kb())

# --------- –ó–∞–∫—Ä–∏—Ç—Ç—è —É–≥–æ–¥–∏: ¬´—â–æ –∑—Ä–æ–±–ª–µ–Ω–æ¬ª + –ø—Ä–∏—á–∏–Ω–∞ ------------------------
@dp.callback_query(F.data.startswith("close:"))
async def cb_close_deal_start(c: CallbackQuery):
    if not is_authed_sync(c.from_user.id):
        await c.answer()
        await c.message.answer("–°–ø–µ—Ä—à—É –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å ‚Äî –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É:", reply_markup=request_phone_kb())
        return
    await c.answer()
    deal_id = c.data.split(":", 1)[1]
    facts = await get_fact_enum_list()
    _PENDING_CLOSE[c.from_user.id] = {"deal_id": deal_id, "stage": "pick_fact", "page": 0}
    await c.message.answer(
        f"–ó–∞–∫—Ä–∏–≤–∞—î–º–æ —É–≥–æ–¥—É <a href=\"https://{settings.B24_DOMAIN}/crm/deal/details/{deal_id}/\">#{deal_id}</a>. –û–±–µ—Ä—ñ—Ç—å, —â–æ –∑—Ä–æ–±–ª–µ–Ω–æ:",
        reply_markup=_facts_page_kb(deal_id, 0, facts),
        disable_web_page_preview=True,
    )

@dp.callback_query(F.data.startswith("factpage:"))
async def cb_fact_page(c: CallbackQuery):
    await c.answer()
    parts = c.data.split(":")
    if len(parts) < 3:
        return
    deal_id, page_s = parts[1], parts[2]
    try:
        page = int(page_s)
    except:
        page = 0
    facts = await get_fact_enum_list()
    await c.message.edit_reply_markup(reply_markup=_facts_page_kb(deal_id, page, facts))
    ctx = _PENDING_CLOSE.get(c.from_user.id)
    if ctx:
        ctx["page"] = page

@dp.callback_query(F.data.startswith("factsel:"))
async def cb_fact_select(c: CallbackQuery):
    await c.answer()
    parts = c.data.split(":")
    if len(parts) < 3:
        return
    deal_id, fact_val = parts[1], parts[2]
    facts = await get_fact_enum_list()
    fact_name = next((n for v, n in facts if v == fact_val), "")
    if not fact_name:
        await c.message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è.")
        return
    _PENDING_CLOSE[c.from_user.id] = {
        "deal_id": deal_id,
        "stage": "await_reason",
        "fact_val": fact_val,
        "fact_name": fact_name,
    }
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data=f"reason_skip:{deal_id}")],
        [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f"cmtcancel:{deal_id}")],
    ])
    await c.message.answer(
        f"–û–±—Ä–∞–Ω–æ: <b>{html.escape(fact_name)}</b>\n–í–≤–µ–¥—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É —Ä–µ–º–æ–Ω—Ç—É –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º, –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏¬ª.",
        reply_markup=kb,
    )

@dp.callback_query(F.data.startswith("reason_skip:"))
async def cb_reason_skip(c: CallbackQuery):
    await c.answer()
    ctx = _PENDING_CLOSE.get(c.from_user.id)
    if not ctx or ctx.get("stage") != "await_reason":
        await c.message.answer("–ù–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è.")
        return
    deal_id = ctx["deal_id"]
    fact_val = ctx["fact_val"]
    fact_name = ctx["fact_name"]
    try:
        await _finalize_close(c.from_user.id, deal_id, fact_val, fact_name, reason_text="")
        await c.message.answer(f"‚úÖ –£–≥–æ–¥—É #{deal_id} –∑–∞–∫—Ä–∏—Ç–æ. –î–∞–Ω—ñ –∑–∞–ø–∏—Å–∞–Ω—ñ.")
        deal2 = await b24("crm.deal.get", id=deal_id)
        await send_deal_card(c.message.chat.id, deal2)
    except Exception as e:
        log.exception("finalize close (skip reason) failed")
        await c.message.answer(f"‚ùóÔ∏è–ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è: {e}")
    finally:
        _PENDING_CLOSE.pop(c.from_user.id, None)

@dp.callback_query(F.data.startswith("cmtcancel:"))
async def cb_close_cancel(c: CallbackQuery):
    await c.answer("–°–∫–∞—Å–æ–≤–∞–Ω–æ")
    _PENDING_CLOSE.pop(c.from_user.id, None)
    await c.message.answer("–°–∫–∞—Å–æ–≤–∞–Ω–æ. –£–≥–æ–¥—É –Ω–µ –∑–º—ñ–Ω–µ–Ω–æ.", reply_markup=main_menu_kb())

# ---------- –ø—Ä–∏–π–º–∞—î–º–æ –¢–Ü–õ–¨–ö–ò –∫–æ–ª–∏ —á–µ–∫–∞—î–º–æ —Ç–µ–∫—Å—Ç –ø—Ä–∏—á–∏–Ω–∏ -------------------
@dp.message(lambda m: _PENDING_CLOSE.get(m.from_user.id, {}).get("stage") == "await_reason")
async def catch_reason_text(m: Message):
    if not is_authed_sync(m.from_user.id):
        # —Ç–µ–æ—Ä–µ—Ç–∏—á–Ω–æ –Ω–µ –ø–æ–≤–∏–Ω–Ω–æ —Å—Ç–∞—Ç–∏—Å—å, –∞–ª–µ –ø—Ä–æ –≤—Å—è–∫
        await ensure_authed_or_ask(m)
        return
    ctx = _PENDING_CLOSE.get(m.from_user.id)
    deal_id = ctx["deal_id"]
    fact_val = ctx["fact_val"]
    fact_name = ctx["fact_name"]
    reason = (m.text or "").strip()
    try:
        await _finalize_close(m.from_user.id, deal_id, fact_val, fact_name, reason_text=reason)
        await m.answer(f"‚úÖ –£–≥–æ–¥—É #{deal_id} –∑–∞–∫—Ä–∏—Ç–æ. –î–∞–Ω—ñ –∑–∞–ø–∏—Å–∞–Ω—ñ.")
        deal2 = await b24("crm.deal.get", id=deal_id)
        await send_deal_card(m.chat.id, deal2)
    except Exception as e:
        log.exception("finalize close (reason text) failed")
        await m.answer(f"‚ùóÔ∏è–ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è: {e}")
    finally:
        _PENDING_CLOSE.pop(m.from_user.id, None)

# ----------------------------- Reports -------------------------------------
@dp.message(F.text == "üìä –ó–≤—ñ—Ç –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ")
async def msg_report_today(m: Message):
    if not is_authed_sync(m.from_user.id):
        await ensure_authed_or_ask(m)
        return
    brigade = get_user_brigade(m.from_user.id)
    if not brigade:
        await m.answer("–°–ø–µ—Ä—à—É –æ–±–µ—Ä—ñ—Ç—å –±—Ä–∏–≥–∞–¥—É:", reply_markup=pick_brigade_inline_kb())
        return
    try:
        label, counts, active_left = await build_daily_report(brigade, offset_days=0)
        await m.answer(format_report(brigade, label, counts, active_left), reply_markup=main_menu_kb())
    except Exception as e:
        log.exception("report today failed")
        await m.answer(f"‚ùóÔ∏è–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –∑–≤—ñ—Ç—É: {e}")

@dp.message(F.text == "üìâ –ó–≤—ñ—Ç –∑–∞ –≤—á–æ—Ä–∞")
async def msg_report_yesterday(m: Message):
    if not is_authed_sync(m.from_user.id):
        await ensure_authed_or_ask(m)
        return
    brigade = get_user_brigade(m.from_user.id)
    if not brigade:
        await m.answer("–°–ø–µ—Ä—à—É –æ–±–µ—Ä—ñ—Ç—å –±—Ä–∏–≥–∞–¥—É:", reply_markup=pick_brigade_inline_kb())
        return
    try:
        label, counts, active_left = await build_daily_report(brigade, offset_days=1)
        await m.answer(format_report(brigade, label, counts, active_left), reply_markup=main_menu_kb())
    except Exception as e:
        log.exception("report yesterday failed")
        await m.answer(f"‚ùóÔ∏è–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –∑–≤—ñ—Ç—É: {e}")

# ----------------------------- Dev helpers ---------------------------------
@dp.message(Command("deal_dump"))
async def deal_dump(m: Message):
    if not is_authed_sync(m.from_user.id):
        await ensure_authed_or_ask(m)
        return
    mtext = (m.text or "").strip()
    m2 = re.search(r"(\d+)", mtext)
    if not m2:
        await m.answer("–í–∫–∞–∂—ñ—Ç—å ID —É–≥–æ–¥–∏: /deal_dump 12345", reply_markup=main_menu_kb())
        return
    deal_id = m2.group(1)
    deal = await b24("crm.deal.get", id=deal_id)
    if not deal:
        await m.answer("–ù–µ –∑–Ω–∞–π—à–æ–≤ —É–≥–æ–¥—É.", reply_markup=main_menu_kb())
        return
    pretty = html.escape(json.dumps(deal, ensure_ascii=False, indent=2))
    await m.answer(f"<b>Dump —É–≥–æ–¥–∏ #{deal_id}</b>\n<pre>{pretty}</pre>", reply_markup=main_menu_kb())
    await send_deal_card(m.chat.id, deal)

# ----------------------------- AUTH handlers -------------------------------
@dp.message(F.contact)
async def on_contact(m: Message):
    """–û–±—Ä–æ–±–ª—è—î–º–æ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ '–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –Ω–æ–º–µ—Ä–æ–º'."""
    c: Optional[Contact] = m.contact
    if not c or not c.phone_number:
        await m.answer("–ù–µ –æ—Ç—Ä–∏–º–∞–≤ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:", reply_markup=request_phone_kb())
        return
    raw = c.phone_number
    digits, _ = normalize_phone(raw)
    log.info("[whoami_phone] user_id=%s username=%s", m.from_user.id, m.from_user.username or "-")
    log.info("[contact] from_user_id=%s raw='%s' digits='%s'", m.from_user.id, raw, digits)

    user = await b24_find_employee_by_phone(digits)
    if not user:
        await m.answer(
            "‚ùå –ù–µ –∑–Ω–∞–π—à–æ–≤ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ –∑ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º .\n"
            "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–æ–º–µ—Ä —É –ø—Ä–æ—Ñ—ñ–ª—ñ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ (–ø–æ–ª–µ ¬´–ú–æ–±—ñ–ª—å–Ω–∏–π¬ª).",
            reply_markup=request_phone_kb(),
        )
        log.info("[auth] NOT FOUND in Bitrix for user_id=%s phone='%s'", m.from_user.id, digits)
        return

    # –û–∫ ‚Äî –∞–≤—Ç–æ—Ä–∏–∑—É—î–º–æ
    mark_authed(m.from_user.id)
    full_name = f"{user.get('NAME','')} {user.get('LAST_NAME','')}".strip() or "‚Äî"
    phone_dbg = (user.get("PERSONAL_MOBILE") or user.get("PERSONAL_PHONE") or user.get("WORK_PHONE") or "").strip()
    log.info("[auth] OK matched bx_user_id=%s name='%s' phone='%s' for tg_user_id=%s",
             user.get("ID"), full_name, phone_dbg, m.from_user.id)

    b = get_user_brigade(m.from_user.id)
    text = f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞. –í—ñ—Ç–∞—é, {html.escape(full_name)}!"
    if b:
        text += f"\n–ü–æ—Ç–æ—á–Ω–∞ –±—Ä–∏–≥–∞–¥–∞: ‚Ññ{b}"
    else:
        text += "\n–û–±–µ—Ä—ñ—Ç—å –≤–∞—à—É –±—Ä–∏–≥–∞–¥—É –Ω–∏–∂—á–µ ‚¨áÔ∏è"
    await m.answer(text, reply_markup=main_menu_kb())
    if not b:
        await m.answer("–®–≤–∏–¥–∫–∏–π –≤–∏–±—ñ—Ä –±—Ä–∏–≥–∞–¥–∏:", reply_markup=pick_brigade_inline_kb())

# ----------------------------- Webhook plumbing ----------------------------
@app.on_event("startup")
async def on_startup():
    global HTTP
    HTTP = aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=60))

    await bot.set_my_commands([
        BotCommand(command="start", description="–ü–æ—á–∞—Ç–∏"),
        BotCommand(command="menu", description="–ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é"),
        BotCommand(command="set_brigade", description="–í–∏–±—Ä–∞—Ç–∏ –±—Ä–∏–≥–∞–¥—É"),
        BotCommand(command="deal_dump", description="–ü–æ–∫–∞–∑–∞—Ç–∏ dump —É–≥–æ–¥–∏"),
    ])

    url = f"{settings.WEBHOOK_BASE.rstrip('/')}/webhook/{settings.WEBHOOK_SECRET}"
    log.info("[startup] setting webhook to: %s", url)
    await bot.set_webhook(url)

@app.on_event("shutdown")
async def on_shutdown():
    await bot.delete_webhook()
    await HTTP.close()
    await bot.session.close()

@app.post("/webhook/{secret}")
async def telegram_webhook(secret: str, request: Request):
    if secret != settings.WEBHOOK_SECRET:
        return {"ok": False}
    update = Update.model_validate(await request.json())
    await dp.feed_update(bot, update)
    return {"ok": True}
